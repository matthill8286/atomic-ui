{"version":3,"file":"OrderBook.js","sources":["../../../../../src/components/Organisms/OrderBook/OrderBook.tsx"],"sourcesContent":["import React, { ReactElement } from 'react'\nimport { Table, TableBody, TableCell, TableHead, TableRow } from '@/components/Atoms/Table'\nimport { CopyText } from '@/components/Atoms/Typography'\nimport { ThemeColors } from '@/types'\nimport { OrderBookEntries, OrderBookEntry } from '@/components/Organisms/OrderBook/OrderBookEntries'\nimport { useWindowDimensions } from '@/components/Helper'\nimport { breakpoints } from '@/styles'\nimport { OrderMeta, OrderRowHash, Type } from '@/components/Organisms/OrderBook/OrderBook.interface'\n\ninterface OrderBookTableProps {\n  rows: OrderRowHash\n  rowsKey: Type\n  maxPriceSize: number\n  isReversed?: boolean\n  title?: string\n  ticker?: string\n  headerTextColor?: ThemeColors\n  textColor?: ThemeColors\n  borderColor?: ThemeColors\n  rowColor?: ThemeColors\n  backgroundColor?: ThemeColors\n  hideOnMobile?: boolean\n  isOutlineRequired?: boolean\n}\n\nexport type Option = {\n  key: string\n  color: string\n}\n\nexport type TypeOptions = {\n  ask: Option\n  bid: Option\n}\n\nconst typeOptions: TypeOptions = {\n  ask: { key: 'ask', color: '#f00' },\n  bid: { key: 'bid', color: '#00d964' },\n}\n\ninterface OrderBookHeaderProps {\n  textColor?: ThemeColors\n  cellText: string\n}\n\nconst orderBookHeadings: string[] = ['Price', 'Size', 'Total']\n\nconst OrderBookHeader: React.FC<OrderBookHeaderProps> = ({ textColor, cellText }): ReactElement => {\n  return (\n    <TableCell cellType=\"th\" collapsible={false}>\n      <CopyText padding=\"0\" margin=\"0\" color={textColor || 'grey4'} toUpperCase>\n        {cellText}\n      </CopyText>\n    </TableCell>\n  )\n}\n\nexport const OrderBookTable: React.FC<OrderBookTableProps> = ({\n  isReversed,\n  textColor,\n  borderColor,\n  backgroundColor,\n  headerTextColor,\n  rows,\n  rowsKey,\n  maxPriceSize,\n  hideOnMobile,\n  isOutlineRequired,\n}): ReactElement => {\n  const { breakpoint: currentBreakpoint } = useWindowDimensions()\n  const isMobile = currentBreakpoint < breakpoints.md\n\n  const displayRows = Object.keys(rows)\n    .map(key => rows[(key as unknown) as number])\n    .filter(k => k)\n\n  if (isMobile && rowsKey === typeOptions.ask.key) {\n    displayRows.reverse()\n  }\n\n  return (\n    <Table withBackground withBorderRadius={false}>\n      <TableHead\n        backgroundColor={backgroundColor || 'secondary'}\n        borderColor={borderColor}\n        isOutlineRequired={isOutlineRequired}>\n        {!hideOnMobile && (\n          <TableRow\n            isReversed={isReversed || false}\n            disableHover\n            textColor={textColor}\n            backgroundColor={backgroundColor || 'secondary'}>\n            {orderBookHeadings.map(entry => (\n              <OrderBookHeader key={entry} cellText={entry} textColor={headerTextColor} />\n            ))}\n          </TableRow>\n        )}\n      </TableHead>\n      <TableBody backgroundColor={backgroundColor} fullBorder={false}>\n        {displayRows.map((row: OrderMeta) => {\n          const { price, size, total } = row\n          const colorSpriteWidth = (total / maxPriceSize) * 100\n\n          return (\n            <OrderBookEntry\n              color=\"white\"\n              key={colorSpriteWidth}\n              isReversed={isReversed}\n              maxPriceSize={maxPriceSize}\n              colorSpriteWidth={colorSpriteWidth}\n              price={price}\n              size={size}\n              total={total}\n            />\n          )\n        })}\n      </TableBody>\n    </Table>\n  )\n}\n"],"names":["typeOptions","key","color","orderBookHeadings","OrderBookHeader","textColor","cellText","React","TableCell","cellType","collapsible","CopyText","padding","margin","toUpperCase","OrderBookTable","isReversed","borderColor","backgroundColor","headerTextColor","rows","rowsKey","maxPriceSize","hideOnMobile","isOutlineRequired","isMobile","useWindowDimensions","breakpoint","breakpoints","md","displayRows","Object","keys","map","filter","k","reverse","Table","withBackground","withBorderRadius","TableHead","TableRow","disableHover","entry","TableBody","fullBorder","row","price","size","total","colorSpriteWidth","OrderBookEntry"],"mappings":"8kBAmCA,IAAMA,EACC,CAAEC,IAAK,MAAOC,MAAO,QAStBC,EAA8B,CAAC,QAAS,OAAQ,SAEhDC,EAAkD,gBAAGC,IAAAA,UAAWC,IAAAA,gBAElEC,gBAACC,GAAUC,SAAS,KAAKC,aAAa,GACpCH,gBAACI,GAASC,QAAQ,IAAIC,OAAO,IAAIX,MAAOG,GAAa,QAASS,gBAC3DR,KAMIS,EAAgD,gBAC3DC,IAAAA,WACAX,IAAAA,UACAY,IAAAA,YACAC,IAAAA,gBACAC,IAAAA,gBACAC,IAAAA,KACAC,IAAAA,QACAC,IAAAA,aACAC,IAAAA,aACAC,IAAAA,kBAGMC,EADoCC,IAAlCC,WAC6BC,EAAYC,GAE3CC,EAAcC,OAAOC,KAAKZ,GAC7Ba,KAAI,SAAAhC,UAAOmB,EAAMnB,MACjBiC,QAAO,SAAAC,UAAKA,YAEXV,GAAYJ,IAAYrB,EAAgBC,KAC1C6B,EAAYM,UAIZ7B,gBAAC8B,GAAMC,kBAAeC,kBAAkB,GACtChC,gBAACiC,GACCtB,gBAAiBA,GAAmB,YACpCD,YAAaA,EACbO,kBAAmBA,IACjBD,GACAhB,gBAACkC,GACCzB,WAAYA,IAAc,EAC1B0B,gBACArC,UAAWA,EACXa,gBAAiBA,GAAmB,aACnCf,EAAkB8B,KAAI,SAAAU,UACrBpC,gBAACH,GAAgBH,IAAK0C,EAAOrC,SAAUqC,EAAOtC,UAAWc,SAKjEZ,gBAACqC,GAAU1B,gBAAiBA,EAAiB2B,YAAY,GACtDf,EAAYG,KAAI,SAACa,OACRC,EAAuBD,EAAvBC,MAAOC,EAAgBF,EAAhBE,KAAMC,EAAUH,EAAVG,MACfC,EAAoBD,EAAQ3B,EAAgB,WAGhDf,gBAAC4C,GACCjD,MAAM,QACND,IAAKiD,EACLlC,WAAYA,EACZM,aAAcA,EACd4B,iBAAkBA,EAClBH,MAAOA,EACPC,KAAMA,EACNC,MAAOA"}