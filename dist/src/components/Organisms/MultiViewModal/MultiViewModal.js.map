{"version":3,"file":"MultiViewModal.js","sources":["../../../../../src/components/Organisms/MultiViewModal/MultiViewModal.tsx"],"sourcesContent":["import React, { FC, Children, PropsWithChildren, useMemo } from 'react'\nimport { Portal, Modal, Button, styled, Icon } from '../../../index'\nimport { useMultiViewModalState, useMultiViewModalAction } from './MultiViewModal.store'\nimport { StyleguideArrow } from '@excelwithbusiness/webmobile-svg-library'\n\nexport type MultiViewModalProps = {\n  targetId: string\n  withScrollableContent?: boolean\n  hideCloseButton?: boolean\n  backButtonText?: string\n  canClose?: boolean\n  showBackButton?: boolean\n}\n\nconst StyledBackButton = styled(Button)`\n  padding-left: 0;\n`\n\nconst StyledBackArrow = styled(Icon)`\n  padding: 0 !important;\n  position: relative;\n  left: -7px;\n`\n\nexport const MultiViewModal: FC<PropsWithChildren<MultiViewModalProps>> = ({\n  targetId,\n  children,\n  withScrollableContent,\n  backButtonText,\n  hideCloseButton = false,\n  canClose = true,\n  showBackButton = true,\n}) => {\n  const { isActive, activeViewId, hasBackButton } = useMultiViewModalState()\n  const { goHome, close } = useMultiViewModalAction()\n  const activeChild = useMemo<any>(\n    () => Children.toArray(children).find((child: any) => child.props.id === activeViewId),\n    [children, activeViewId]\n  )\n  if (!isActive) return null\n  return (\n    <Portal targetRootId={targetId}>\n      <Modal\n        onClose={close}\n        canClose={canClose}\n        primaryButtonProps={activeChild?.props.primaryButtonProps}\n        secondaryButtonProps={activeChild?.props.secondaryButtonProps}\n        withScrollableContent={withScrollableContent}\n        hideCloseButton={hideCloseButton}>\n        <>\n          {hasBackButton && showBackButton && (\n            <StyledBackButton actionType=\"ghost\" onClick={goHome}>\n              <StyledBackArrow rotate={180} width=\"sm\" height=\"sm\">\n                <StyleguideArrow />\n              </StyledBackArrow>\n              {backButtonText}\n            </StyledBackButton>\n          )}\n          {activeChild}\n        </>\n      </Modal>\n    </Portal>\n  )\n}\n\nMultiViewModal.displayName = 'MultiViewModal'\n"],"names":["StyledBackButton","styled","Button","StyledBackArrow","Icon","MultiViewModal","targetId","children","withScrollableContent","backButtonText","hideCloseButton","canClose","showBackButton","useMultiViewModalState","isActive","activeViewId","hasBackButton","useMultiViewModalAction","goHome","close","activeChild","useMemo","Children","toArray","find","child","props","id","React","Portal","targetRootId","Modal","onClose","primaryButtonProps","secondaryButtonProps","actionType","onClick","rotate","width","height","StyleguideArrow","displayName"],"mappings":"uhBAcA,IAAMA,EAAmBC,EAAOC,0FAAPD,sBAInBE,EAAkBF,EAAOG,yFAAPH,wDAMXI,EAA6D,gBACxEC,IAAAA,SACAC,IAAAA,SACAC,IAAAA,sBACAC,IAAAA,mBACAC,gBAAAA,oBACAC,SAAAA,oBACAC,eAAAA,kBAEkDC,IAA1CC,IAAAA,SAAUC,IAAAA,aAAcC,IAAAA,gBACNC,IAAlBC,IAAAA,OAAQC,IAAAA,MACVC,EAAcC,GAClB,kBAAMC,EAASC,QAAQhB,GAAUiB,MAAK,SAACC,UAAeA,EAAMC,MAAMC,KAAOZ,OACzE,CAACR,EAAUQ,WAERD,EAEHc,gBAACC,GAAOC,aAAcxB,GACpBsB,gBAACG,GACCC,QAASb,EACTR,SAAUA,EACVsB,mBAAoBb,MAAAA,SAAAA,EAAaM,MAAMO,mBACvCC,qBAAsBd,MAAAA,SAAAA,EAAaM,MAAMQ,qBACzC1B,sBAAuBA,EACvBE,gBAAiBA,GACjBkB,gCACGZ,GAAiBJ,GAChBgB,gBAAC5B,GAAiBmC,WAAW,QAAQC,QAASlB,GAC5CU,gBAACzB,GAAgBkC,OAAQ,IAAKC,MAAM,KAAKC,OAAO,MAC9CX,gBAACY,SAEF/B,GAGJW,KAnBa,MA0BxBf,EAAeoC,YAAc"}