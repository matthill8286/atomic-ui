{"version":3,"file":"MultiViewModal.store.js","sources":["../../../../../src/components/Organisms/MultiViewModal/MultiViewModal.store.tsx"],"sourcesContent":["import React, { Dispatch, createContext, useContext, useReducer, useMemo, FC } from 'react'\n\nenum MultiViewModalActionType {\n  MULTI_VIEW_MODAL_CLOSE = 'MULTI_VIEW_MODAL_CLOSE',\n  MULTI_VIEW_MODAL_GO_HOME = 'MULTI_VIEW_MODAL_GO_HOME',\n  MULTI_VIEW_MODAL_SET_VIEW = 'MULTI_VIEW_MODAL_SET_VIEW',\n  MULTI_VIEW_MODAL_SET_ACTIVE = 'MULTI_VIEW_MODAL_SET_ACTIVE',\n}\n\ntype MultiViewModalClose = ReturnType<typeof closeAction>\nconst closeAction = () => ({\n  type: MultiViewModalActionType.MULTI_VIEW_MODAL_CLOSE,\n  payload: {},\n})\n\ntype MultiViewModalGoHome = ReturnType<typeof goHomeAction>\nconst goHomeAction = () => ({\n  type: MultiViewModalActionType.MULTI_VIEW_MODAL_GO_HOME,\n  payload: {},\n})\n\ntype MultiViewModalSetView = ReturnType<typeof setViewAction>\nconst setViewAction = (id: string) => ({\n  type: MultiViewModalActionType.MULTI_VIEW_MODAL_SET_VIEW,\n  payload: { id },\n})\n\ntype MultiViewModalSetActive = ReturnType<typeof setActiveAction>\nconst setActiveAction = (isActive: boolean) => ({\n  type: MultiViewModalActionType.MULTI_VIEW_MODAL_SET_ACTIVE,\n  payload: { isActive },\n})\n\ntype MultiViewModalAction =\n  | MultiViewModalSetView\n  | MultiViewModalSetActive\n  | MultiViewModalGoHome\n  | MultiViewModalClose\n\ninterface MultiViewModalState {\n  homeViewId: string | null\n  activeViewId: string | null\n  hasBackButton: boolean\n  isActive: boolean\n}\n\ntype MultiViewModalStore = [MultiViewModalState, Dispatch<MultiViewModalAction>]\n\ntype MultiViewModalReducer = (\n  state: MultiViewModalState,\n  action: MultiViewModalAction\n) => MultiViewModalState\n\nconst initialState: MultiViewModalState = {\n  homeViewId: null,\n  activeViewId: null,\n  hasBackButton: false,\n  isActive: false,\n}\n\nconst reducer: MultiViewModalReducer = (\n  state: MultiViewModalState,\n  action: MultiViewModalAction\n): MultiViewModalState => {\n  switch (action.type) {\n    case MultiViewModalActionType.MULTI_VIEW_MODAL_CLOSE: {\n      return {\n        ...state,\n        activeViewId: state.homeViewId,\n        hasBackButton: false,\n        isActive: false,\n      }\n    }\n    case MultiViewModalActionType.MULTI_VIEW_MODAL_GO_HOME: {\n      return {\n        ...state,\n        activeViewId: state.homeViewId,\n        hasBackButton: false,\n      }\n    }\n    case MultiViewModalActionType.MULTI_VIEW_MODAL_SET_VIEW: {\n      const {\n        payload: { id },\n      } = action as MultiViewModalSetView\n      return {\n        ...state,\n        activeViewId: id,\n        hasBackButton: id !== state.homeViewId,\n      }\n    }\n    case MultiViewModalActionType.MULTI_VIEW_MODAL_SET_ACTIVE: {\n      const {\n        payload: { isActive },\n      } = action as MultiViewModalSetActive\n      return {\n        ...state,\n        isActive,\n      }\n    }\n    default:\n      return state\n  }\n}\n\nconst MultiViewModalContext = createContext<MultiViewModalStore>([\n  initialState,\n  // eslint-disable-next-line no-console\n  action => console.log(action),\n])\n\nconst useMultiViewModalContext = () => useContext<MultiViewModalStore>(MultiViewModalContext)\n\nconst useMultiViewModalReducer = (homeViewId: string): MultiViewModalStore =>\n  useReducer<MultiViewModalReducer>(reducer, {\n    ...initialState,\n    homeViewId,\n    activeViewId: homeViewId,\n  })\n\nexport const useMultiViewModalAction = () => {\n  const [, dispatch] = useMultiViewModalContext()\n  return useMemo(\n    () => ({\n      close: () => dispatch(closeAction()),\n      goHome: () => dispatch(goHomeAction()),\n      setView: id => dispatch(setViewAction(id)),\n      setActive: isActive => dispatch(setActiveAction(isActive)),\n    }),\n    [dispatch]\n  )\n}\n\nexport const useMultiViewModalState = (): MultiViewModalState => useMultiViewModalContext()[0]\n\nexport const MultiViewModalProvider: FC<{ homeViewId: string }> = ({ homeViewId, children }) => {\n  const modalReducer = useMultiViewModalReducer(homeViewId)\n  return (\n    <MultiViewModalContext.Provider value={modalReducer}>{children}</MultiViewModalContext.Provider>\n  )\n}\n"],"names":["MultiViewModalActionType","initialState","homeViewId","activeViewId","hasBackButton","isActive","reducer","state","action","type","MULTI_VIEW_MODAL_CLOSE","MULTI_VIEW_MODAL_GO_HOME","MULTI_VIEW_MODAL_SET_VIEW","id","payload","MULTI_VIEW_MODAL_SET_ACTIVE","MultiViewModalContext","createContext","console","log","useMultiViewModalContext","useContext","useMultiViewModalAction","dispatch","useMemo","close","goHome","setView","setViewAction","setActive","setActiveAction","useMultiViewModalState","MultiViewModalProvider","children","modalReducer","useReducer","useMultiViewModalReducer","React","Provider","value"],"mappings":"+LAEKA,YAAAA,GAAAA,kDAAAA,sDAAAA,wDAAAA,6DAAAA,IAAAA,OAQL,IA2CMC,EAAoC,CACxCC,WAAY,KACZC,aAAc,KACdC,eAAe,EACfC,UAAU,GAGNC,EAAiC,SACrCC,EACAC,UAEQA,EAAOC,WACRT,EAAyBU,qCAEvBH,OACHJ,aAAcI,EAAML,WACpBE,eAAe,EACfC,UAAU,SAGTL,EAAyBW,uCAEvBJ,OACHJ,aAAcI,EAAML,WACpBE,eAAe,SAGdJ,EAAyBY,8BAEfC,EACTL,EADFM,QAAWD,iBAGRN,OACHJ,aAAcU,EACdT,cAAeS,IAAON,EAAML,kBAG3BF,EAAyBe,gCAEfV,EACTG,EADFM,QAAWT,uBAGRE,OACHF,SAAAA,mBAIKE,IAIPS,EAAwBC,EAAmC,CAC/DhB,EAEA,SAAAO,UAAUU,QAAQC,IAAIX,MAGlBY,EAA2B,kBAAMC,EAAgCL,IAS1DM,EAA0B,iBAChBF,IAAZG,mBACFC,GACL,iBAAO,CACLC,MAAO,kBAAMF,EAjHQ,CACzBd,KAAMT,EAAyBU,uBAC/BI,QAAS,MAgHLY,OAAQ,kBAAMH,EA5GQ,CAC1Bd,KAAMT,EAAyBW,yBAC/BG,QAAS,MA2GLa,QAAS,SAAAd,UAAMU,EAvGC,SAACV,SAAgB,CACrCJ,KAAMT,EAAyBY,0BAC/BE,QAAS,CAAED,GAAAA,IAqGiBe,CAAcf,KACtCgB,UAAW,SAAAxB,UAAYkB,EAlGL,SAAClB,SAAuB,CAC9CI,KAAMT,EAAyBe,4BAC/BD,QAAS,CAAET,SAAAA,IAgGyByB,CAAgBzB,QAElD,CAACkB,KAIQQ,EAAyB,kBAA2BX,IAA2B,IAE/EY,EAAqD,gBAAG9B,IAAAA,WAAY+B,IAAAA,SACzEC,EAvByB,SAAChC,UAChCiC,EAAkC7B,SAC7BL,OACHC,WAAAA,EACAC,aAAcD,KAmBKkC,CAAyBlC,UAE5CmC,gBAACrB,EAAsBsB,UAASC,MAAOL,GAAeD"}