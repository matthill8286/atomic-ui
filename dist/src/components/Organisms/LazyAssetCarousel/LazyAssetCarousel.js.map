{"version":3,"file":"LazyAssetCarousel.js","sources":["../../../../../src/components/Organisms/LazyAssetCarousel/LazyAssetCarousel.tsx"],"sourcesContent":["import React, { useState } from 'react'\nimport { useWindowDimensions } from '@/components/Helper/useWindowDimensions'\nimport { SimpleCarousel } from '@/components/Molecules/SimpleCarousel'\nimport { breakpoints } from '@/styles'\nimport { Asset } from '@/types/asset'\nimport { AssetTile, AssetTileLayout } from '../AssetTile'\nimport { AssetCarouselProps, CarouselConfigProps } from './LazyAssetCarousel.interface'\nimport { ClippingWrapper, StyledTileWrapper, StyledHeading } from './LazyAssetCarousel.styled'\nimport { useBadges } from './useBadges'\n\nexport const LazyAssetCarousel: React.FC<AssetCarouselProps> = ({\n  loading = true,\n  lazyLoad = true,\n  assets = [],\n  context = 'homepage-asset-carousel',\n  withOverflow = true,\n  withPadding = true,\n  hideLeftOverflow = false,\n  arrows = true,\n  brightArrows = true,\n  dots = true,\n  title,\n  smallSlides = 1,\n  mediumSlides = 2,\n  largeSlides = 4,\n  smallConfig = {},\n  mediumConfig = {},\n  largeConfig = {},\n  showBookmark = true,\n  showSkills = true,\n  showProvider,\n  showLock = false,\n  fixedWidth,\n  tileWidth,\n  playlistOrientation = 'portrait',\n  playlistView = 'list',\n  playlistLayout = AssetTileLayout.gridItem,\n  strategyType = undefined,\n  videoFallbackImage,\n  renderAddToBookmarkButton,\n  onAssetClick = () => {\n    return null\n  },\n  onLockClick = () => {\n    return null\n  },\n  onSlideChange = () => {\n    return null\n  },\n  customSlickSettings,\n}) => {\n  const { breakpoint } = useWindowDimensions()\n  const [prevSlideIndex, setPrevSlideIndex] = useState(0)\n  const [isDragging, setIsDragging] = useState(false)\n\n  if (!assets) {\n    return null\n  }\n\n  const assetsPerSlideWithHook =\n    breakpoint >= breakpoints.lg\n      ? largeSlides\n      : breakpoint >= breakpoints.md\n      ? mediumSlides\n      : smallSlides\n\n  const currentConfig =\n    breakpoint >= breakpoints.lg\n      ? largeConfig\n      : breakpoint >= breakpoints.md\n      ? mediumConfig\n      : smallConfig\n\n  const getLeftOverflow = (config: CarouselConfigProps): boolean =>\n    config.hideLeftOverflow ?? hideLeftOverflow\n\n  const withArrows = (config: CarouselConfigProps): boolean => config.arrows ?? arrows\n  const withDots = (config: CarouselConfigProps): boolean => config.dots ?? dots\n\n  const handleSlideChange = (assetsPerSlide: number) => (nextSlideIndex: number) => (\n    assets: Asset[]\n  ) => {\n    setIsDragging(false)\n    const direction = nextSlideIndex > prevSlideIndex ? 'Next' : 'Previous'\n    const slideIndex = nextSlideIndex / assetsPerSlide + 1\n    const totalNumberOfPages = assets.length / assetsPerSlide\n\n    setPrevSlideIndex(nextSlideIndex)\n\n    const assetsInSlide = assets.slice(\n      slideIndex * assetsPerSlide,\n      slideIndex * assetsPerSlide + assetsPerSlide\n    )\n\n    onSlideChange?.({\n      assets: assetsInSlide,\n      direction,\n      assetAmount: assetsPerSlide,\n      pageNumber: slideIndex,\n      context,\n      numberOfPages: totalNumberOfPages,\n    })\n  }\n\n  const handleAssetClick = (assetsPerSlide: number) => (\n    e: React.MouseEvent<HTMLElement>,\n    asset: Asset,\n    index: number,\n    pageNumber: number\n  ) => {\n    if (isDragging) {\n      e.preventDefault()\n    } else {\n      onAssetClick({ asset, index, assetsPerSlide, pageNumber, context })\n    }\n  }\n\n  const handleLockClick = (assetsPerSlide: number) => (\n    e: React.MouseEvent<HTMLElement>,\n    asset: Asset,\n    index: number,\n    pageNumber: number\n  ) => {\n    if (isDragging) {\n      e.preventDefault()\n    } else {\n      onLockClick?.({ asset, index, assetsPerSlide, pageNumber, context })\n    }\n  }\n\n  const slickSettings = (config: CarouselConfigProps) => ({\n    infinite: false,\n    speed: 250,\n    initialSlide: 0,\n    dots: withDots(config),\n    arrows: withArrows(config),\n    beforeChange: (oldSlide: number, newSlide: number) => {\n      if (oldSlide !== newSlide) {\n        setIsDragging(true)\n      }\n    },\n    ...customSlickSettings,\n  })\n\n  const carouselSettings = (config: CarouselConfigProps) => ({\n    hasOverflow: config.withOverflow ?? withOverflow,\n    hasPadding: config.withPadding ?? withPadding,\n    fixedWidth: fixedWidth,\n    brightArrows: brightArrows,\n  })\n\n  const tileSettings = {\n    showBadges: true,\n    loading: loading,\n    isCompact: false,\n    fontSize: 'xs',\n    withEllipsis: true,\n  }\n\n  const renderAsset = (assetsPerSlide: number) => (asset: Asset, index: number) => {\n    const slideIndex = Math.floor(index / assetsPerSlide)\n    const isDummyTile = !withOverflow && !asset.description\n    const badges = useBadges({ asset, playlistView })\n\n    const loading = tileSettings.loading || isDummyTile\n\n    return (\n      <StyledTileWrapper key={index} withLabels>\n        <AssetTile\n          {...tileSettings}\n          showProvider={showProvider}\n          showSkills={showSkills}\n          assetIndex={slideIndex}\n          isDisabled={asset?.locked}\n          videoFallbackImage={videoFallbackImage}\n          isCollection={playlistView === 'collection'}\n          orientation={playlistOrientation}\n          badges={badges}\n          sponsoringDetails={undefined} // TODO: allow sponsored assets to curate custom content\n          showBookmark={showBookmark}\n          showLock={showLock}\n          assetView={playlistView}\n          fontSize=\"sm\"\n          strategyType={strategyType}\n          renderAddToBookmarkButton={renderAddToBookmarkButton}\n          onClick={(e: React.MouseEvent<HTMLElement, MouseEvent>) =>\n            handleAssetClick(assetsPerSlide)(e, asset, index, slideIndex)\n          }\n          onLockClick={(e: React.MouseEvent<HTMLElement, MouseEvent>) =>\n            handleLockClick(assetsPerSlide)(e, asset, index, slideIndex)\n          }\n          loading={loading}\n          layout={playlistLayout}\n          asset={asset}\n          lazyLoad={lazyLoad}\n        />\n      </StyledTileWrapper>\n    )\n  }\n\n  return (\n    <ClippingWrapper hideLeft={getLeftOverflow(currentConfig)}>\n      {title ? <StyledHeading>{title}</StyledHeading> : null}\n      <SimpleCarousel\n        tileWidth={tileWidth}\n        fixedWidth={fixedWidth}\n        sliderSettings={{\n          ...slickSettings(currentConfig),\n          afterChange: (current: number) =>\n            handleSlideChange(assetsPerSlideWithHook)(current)(assets),\n          slidesToShow: assetsPerSlideWithHook,\n          slidesToScroll: assetsPerSlideWithHook,\n        }}\n        items={assets}\n        renderSlide={renderAsset(assetsPerSlideWithHook)}\n        {...carouselSettings(currentConfig)}\n      />\n    </ClippingWrapper>\n  )\n}\n\nLazyAssetCarousel.displayName = 'LazyAssetCarousel'\n"],"names":["LazyAssetCarousel","loading","lazyLoad","assets","context","withOverflow","withPadding","hideLeftOverflow","arrows","brightArrows","dots","title","smallSlides","mediumSlides","largeSlides","smallConfig","mediumConfig","largeConfig","showBookmark","showSkills","showProvider","showLock","fixedWidth","tileWidth","playlistOrientation","playlistView","playlistLayout","AssetTileLayout","gridItem","strategyType","undefined","videoFallbackImage","renderAddToBookmarkButton","onAssetClick","onLockClick","onSlideChange","customSlickSettings","breakpoint","useWindowDimensions","useState","prevSlideIndex","setPrevSlideIndex","isDragging","setIsDragging","assetsPerSlide","config","assetsPerSlideWithHook","breakpoints","lg","md","currentConfig","withArrows","withDots","handleLockClick","e","asset","index","pageNumber","preventDefault","tileSettings","showBadges","isCompact","fontSize","withEllipsis","React","ClippingWrapper","hideLeft","StyledHeading","SimpleCarousel","sliderSettings","infinite","speed","initialSlide","beforeChange","oldSlide","newSlide","slickSettings","afterChange","current","nextSlideIndex","direction","slideIndex","totalNumberOfPages","length","assetsInSlide","slice","assetAmount","numberOfPages","handleSlideChange","slidesToShow","slidesToScroll","items","renderSlide","Math","floor","isDummyTile","description","badges","useBadges","StyledTileWrapper","key","withLabels","AssetTile","assetIndex","isDisabled","locked","isCollection","orientation","sponsoringDetails","assetView","onClick","handleAssetClick","layout","hasOverflow","hasPadding","carouselSettings","displayName"],"mappings":"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"}