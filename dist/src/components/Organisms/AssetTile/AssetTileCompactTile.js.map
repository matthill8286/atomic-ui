{"version":3,"file":"AssetTileCompactTile.js","sources":["../../../../../src/components/Organisms/AssetTile/AssetTileCompactTile.tsx"],"sourcesContent":["import React from 'react'\nimport { AssetTileVariantProps } from '@/components/Organisms/AssetTile/helpers/layout'\nimport { useHistory } from 'react-router-dom'\nimport { NativeLazyLoadOptions } from '@/components/Atoms/Picture'\nimport { Card } from '@/components/Atoms/Card'\nimport {\n  AssetTileCompact as CompactAssetTile,\n  AssetTileCompactElement,\n} from '@/components/Organisms/AssetTileCompact'\nimport { IconButton } from '@/components/Atoms/Button'\nimport { Icon } from '@/components/Atoms/Icon'\nimport { StyleguideBookmarkActive, StyleguideCheckmarkCircle } from '@/svgs'\n\nexport const AssetTileCompactTile: React.FC<AssetTileVariantProps> = ({\n  competencyLabel,\n  placeCard = false,\n  showImage = true,\n  showInteractions = true,\n  loading = false,\n  isDisabled,\n  asset,\n  mainLink,\n  onClick,\n  onLockClick,\n}) => {\n  if (!asset || !Object.keys(asset).length) {\n    return null\n  }\n\n  const history = useHistory()\n\n  const { title, image, provider, duration, competencies, type, interaction, id } = asset\n\n  const onTileClick = React.useCallback(\n    (event: React.MouseEvent<HTMLElement, MouseEvent>) => {\n      if (loading || isDisabled) {\n        return null\n      }\n\n      if (typeof onClick === 'function') {\n        onClick(event)\n      }\n\n      if (mainLink) {\n        // navigate to mainLink\n        if (mainLink.to) return history.push(mainLink.to)\n        if (mainLink.href) return (window.location.href = mainLink.href)\n      }\n    },\n    [history, mainLink, onClick]\n  )\n\n  const onLockedClick = React.useCallback(\n    (event: React.MouseEvent<HTMLElement, MouseEvent>) => {\n      if (loading) {\n        return null\n      }\n\n      if (typeof onLockClick === 'function') {\n        onLockClick(event)\n      }\n    },\n    [onLockClick]\n  )\n\n  const onTileClickHandler = (event: React.MouseEvent<HTMLElement, MouseEvent>) =>\n    asset?.locked ? onLockedClick(event) : onTileClick(event)\n\n  const item = (\n    <CompactAssetTile\n      loading={loading}\n      showImage={showImage}\n      assetImage={image}\n      title={title}\n      onClick={onTileClickHandler}\n      lazyLoadImage={NativeLazyLoadOptions.Eager}>\n      <AssetTileCompactElement\n        title={asset?.title}\n        provider={provider?.name}\n        competency={competencies?.[0]?.text || competencyLabel}\n        type={asset?.type?.name}\n        description={asset?.description}\n        loading={loading}\n        showInteractions={showInteractions}\n        iconsComponent={\n          <>\n            {interaction?.bookmarked && (\n              <IconButton isFlat actionType=\"ghost\">\n                <Icon width={20} height={20} color=\"grey5\">\n                  <StyleguideBookmarkActive height=\"sm\" width=\"sm\" fill=\"grey2\" />\n                </Icon>\n              </IconButton>\n            )}\n            {interaction?.completed.status && (\n              <IconButton isFlat actionType=\"ghost\">\n                <Icon width={20} height={20} color=\"grey5\">\n                  <StyleguideCheckmarkCircle />\n                </Icon>\n              </IconButton>\n            )}\n          </>\n        }\n      />\n    </CompactAssetTile>\n  )\n\n  return (\n    <>\n      {placeCard ? (\n        <Card elevation={0} noBorder={[]} padding=\"xs\" shape=\"rounded-xl\" surface=\"white\">\n          {item}\n        </Card>\n      ) : (\n        item\n      )}\n    </>\n  )\n}\n"],"names":["AssetTileCompactTile","competencyLabel","placeCard","showImage","showInteractions","loading","isDisabled","asset","mainLink","onClick","onLockClick","Object","keys","length","history","useHistory","title","image","provider","duration","competencies","type","interaction","id","onTileClick","React","useCallback","event","to","push","href","window","location","onLockedClick","item","CompactAssetTile","assetImage","locked","lazyLoadImage","NativeLazyLoadOptions","Eager","AssetTileCompactElement","name","competency","text","_asset$type","description","iconsComponent","bookmarked","IconButton","isFlat","actionType","Icon","width","height","color","StyleguideBookmarkActive","fill","completed","status","StyleguideCheckmarkCircle","Card","elevation","noBorder","padding","shape","surface"],"mappings":"6uBAaaA,EAAwD,oBACnEC,IAAAA,oBACAC,UAAAA,oBACAC,UAAAA,oBACAC,iBAAAA,oBACAC,QAAAA,gBACAC,IAAAA,WACAC,IAAAA,MACAC,IAAAA,SACAC,IAAAA,QACAC,IAAAA,gBAEKH,IAAUI,OAAOC,KAAKL,GAAOM,cACzB,SAGHC,EAAUC,IAERC,EAA0ET,EAA1ES,MAAOC,EAAmEV,EAAnEU,MAAOC,EAA4DX,EAA5DW,SAA4DX,EAAlDY,aAAUC,EAAwCb,EAAxCa,aAAwCb,EAA1Bc,SAAMC,EAAoBf,EAApBe,YAAoBf,EAAPgB,OAErEC,EAAcC,EAAMC,aACxB,SAACC,MACKtB,GAAWC,SACN,QAGc,mBAAZG,GACTA,EAAQkB,GAGNnB,EAAU,IAERA,EAASoB,GAAI,OAAOd,EAAQe,KAAKrB,EAASoB,OAC1CpB,EAASsB,KAAM,OAAQC,OAAOC,SAASF,KAAOtB,EAASsB,QAG/D,CAAChB,EAASN,EAAUC,IAGhBwB,EAAgBR,EAAMC,aAC1B,SAACC,MACKtB,SACK,KAGkB,mBAAhBK,GACTA,EAAYiB,KAGhB,CAACjB,IAMGwB,EACJT,gBAACU,GACC9B,QAASA,EACTF,UAAWA,EACXiC,WAAYnB,EACZD,MAAOA,EACPP,QATuB,SAACkB,UAC1BpB,MAAAA,GAAAA,EAAO8B,OAASJ,EAAcN,GAASH,EAAYG,IASjDW,cAAeC,EAAsBC,OACrCf,gBAACgB,GACCzB,MAAOT,MAAAA,SAAAA,EAAOS,MACdE,SAAUA,MAAAA,SAAAA,EAAUwB,KACpBC,YAAYvB,MAAAA,aAAAA,EAAe,yBAAIwB,OAAQ3C,EACvCoB,KAAMd,MAAAA,aAAAA,EAAOc,yBAAPwB,EAAaH,KACnBI,YAAavC,MAAAA,SAAAA,EAAOuC,YACpBzC,QAASA,EACTD,iBAAkBA,EAClB2C,eACEtB,iCACGH,MAAAA,SAAAA,EAAa0B,aACZvB,gBAACwB,GAAWC,UAAOC,WAAW,SAC5B1B,gBAAC2B,GAAKC,MAAO,GAAIC,OAAQ,GAAIC,MAAM,SACjC9B,gBAAC+B,GAAyBF,OAAO,KAAKD,MAAM,KAAKI,KAAK,aAI3DnC,MAAAA,SAAAA,EAAaoC,UAAUC,SACtBlC,gBAACwB,GAAWC,UAAOC,WAAW,SAC5B1B,gBAAC2B,GAAKC,MAAO,GAAIC,OAAQ,GAAIC,MAAM,SACjC9B,gBAACmC,qBAWfnC,gCACGvB,EACCuB,gBAACoC,GAAKC,UAAW,EAAGC,SAAU,GAAIC,QAAQ,KAAKC,MAAM,aAAaC,QAAQ,SACvEhC,GAGHA"}