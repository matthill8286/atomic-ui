{"version":3,"file":"ProductsTableMobile.js","sources":["../../../../../src/components/Organisms/ProductsTable/ProductsTableMobile.tsx"],"sourcesContent":["import zip from 'lodash/zip'\nimport React, { useMemo } from 'react'\nimport { Table, TableBody, TableCell, TableHead, TableRow } from '@/components/Atoms/Table'\nimport { CopyText } from '@/components/Atoms/Typography'\nimport { convertPrice } from '@/utils/convertPrice'\nimport { IconOrText } from './IconOrText'\nimport { ImageAndTextCell } from './ImageAndTextCell'\nimport { ProductCell } from './ProductCell'\nimport { ProductsTableProps, TableRowDataProps } from './ProductsTable.interface'\nimport {\n  StyledFixedTable,\n  StyledMobileTable,\n  StyledScrollTable,\n} from './ProductsTableMobile.styled'\n\nexport const ProductsTableMobile: React.FC<ProductsTableProps> = ({\n  tableHeading,\n  tableContent,\n  getProductUrl,\n}) => {\n  const renderTable = (features: TableRowDataProps[], content: TableRowDataProps[][]) => {\n    return (\n      <Table>\n        <TableHead>\n          <TableRow collapsible={false}>\n            <TableCell key=\"blank\" cellType=\"th\" noBorder collapsible={false}>\n              &nbsp;\n            </TableCell>\n            {features &&\n              features.map((featureElement: TableRowDataProps, index) => (\n                <TableCell\n                  collapsible={false}\n                  key={featureElement.text + index}\n                  cellType={'th'}\n                  borderDirection=\"right\">\n                  {featureElement.isFeatureName ? (\n                    <ImageAndTextCell>\n                      {featureElement.image && <img src={featureElement.image.url} alt=\"\" />}\n                      <CopyText tag={'span'} fontSize={'sm'}>\n                        {featureElement.text}\n                      </CopyText>\n                    </ImageAndTextCell>\n                  ) : (\n                    <IconOrText textType={featureElement.text} />\n                  )}\n                </TableCell>\n              ))}\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {content &&\n            content.map((productRow: TableRowDataProps[], index) => {\n              if (!productRow) {\n                return null\n              }\n              const product = tableHeading[index]\n              if (!product?.product) {\n                return null\n              }\n              const productId = product.productId\n              const { title } = product.product\n              const linkUrl = getProductUrl(title, productId)\n              return (\n                <TableRow key={'feature-' + index} collapsible={false}>\n                  <TableCell key={'product'} cellType={'th'} noBorder collapsible={false}>\n                    <ProductCell linkUrl={linkUrl}>\n                      <CopyText tag={'span'} fontSize={'sm'} weight=\"semibold\">\n                        {title.slice(0, 30)}\n                      </CopyText>\n                      <CopyText tag={'span'}>\n                        {' '}\n                        {convertPrice(product?.price?.price, product?.price?.currency, '', false)}\n                      </CopyText>\n                    </ProductCell>\n                  </TableCell>\n                  {productRow.map((feature: TableRowDataProps, index) => {\n                    return (\n                      <TableCell\n                        key={feature.text + index}\n                        borderDirection=\"right\"\n                        collapsible={false}>\n                        <IconOrText textType={feature.text} />\n                      </TableCell>\n                    )\n                  })}\n                </TableRow>\n              )\n            })}\n        </TableBody>\n      </Table>\n    )\n  }\n\n  // instead of feature-based rows as in the desktop table we want to have product-based rows\n  // therefore we need to transpose the table content\n  const transposedContent = content => {\n    const contentMatrix = content\n      ? content.map(({ tableRow }) => {\n          return tableRow ? Object.values(tableRow) : null\n        })\n      : []\n\n    const transposed = zip(...contentMatrix) as TableRowDataProps[][]\n    const featureCells = transposed ? transposed[0] : []\n    const contentCells = transposed ? transposed.slice(1, transposed.length) : []\n    return { featureCells, contentCells }\n  }\n\n  const { featureCells, contentCells } = useMemo(() => transposedContent(tableContent), [\n    tableContent,\n  ])\n\n  const mobileTable = renderTable(featureCells, contentCells)\n\n  return (\n    <StyledMobileTable>\n      <StyledFixedTable>{mobileTable}</StyledFixedTable>\n      <StyledScrollTable>{mobileTable}</StyledScrollTable>\n    </StyledMobileTable>\n  )\n}\n"],"names":["ProductsTableMobile","features","content","tableHeading","tableContent","getProductUrl","useMemo","contentMatrix","map","tableRow","Object","values","featureCells","transposed","zip","contentCells","slice","length","mobileTable","React","Table","TableHead","TableRow","collapsible","TableCell","key","cellType","noBorder","featureElement","index","text","borderDirection","isFeatureName","ImageAndTextCell","image","src","url","alt","CopyText","tag","fontSize","IconOrText","textType","TableBody","productRow","product","productId","title","linkUrl","ProductCell","weight","convertPrice","price","_product$price","_product$price2","currency","feature","StyledMobileTable","StyledFixedTable","StyledScrollTable"],"mappings":"21BAeaA,EAAoD,gBAK1CC,EAA+BC,EAJpDC,IAAAA,aACAC,IAAAA,aACAC,IAAAA,gBA0FuCC,GAAQ,kBAZvCC,GADkBL,EAa6CE,GAXjEF,EAAQM,KAAI,gBAAGC,IAAAA,gBACNA,EAAWC,OAAOC,OAAOF,GAAY,QAE9C,GAKG,CAAEG,cAHHC,EAAaC,iBAAOP,KACQM,EAAW,GAAK,GAE3BE,aADFF,EAAaA,EAAWG,MAAM,EAAGH,EAAWI,QAAU,IATnD,IAAAf,EAClBK,EAMAM,IAM8E,CACpFT,IADMQ,IAAAA,aAAcG,IAAAA,aAIhBG,GA5FejB,EA4FWW,EA5FoBV,EA4FNa,EA1F1CI,gBAACC,OACCD,gBAACE,OACCF,gBAACG,GAASC,aAAa,GACrBJ,gBAACK,GAAUC,IAAI,QAAQC,SAAS,KAAKC,YAASJ,aAAa,QAG1DtB,GACCA,EAASO,KAAI,SAACoB,EAAmCC,UAC/CV,gBAACK,GACCD,aAAa,EACbE,IAAKG,EAAeE,KAAOD,EAC3BH,SAAU,KACVK,gBAAgB,SACfH,EAAeI,cACdb,gBAACc,OACEL,EAAeM,OAASf,uBAAKgB,IAAKP,EAAeM,MAAME,IAAKC,IAAI,KACjElB,gBAACmB,GAASC,IAAK,OAAQC,SAAU,MAC9BZ,EAAeE,OAIpBX,gBAACsB,GAAWC,SAAUd,EAAeE,aAMjDX,gBAACwB,OACEzC,GACCA,EAAQM,KAAI,SAACoC,EAAiCf,eACvCe,SACI,SAEHC,EAAU1C,EAAa0B,MACxBgB,MAAAA,IAAAA,EAASA,eACL,SAEHC,EAAYD,EAAQC,UAClBC,EAAUF,EAAQA,QAAlBE,MACFC,EAAU3C,EAAc0C,EAAOD,UAEnC3B,gBAACG,GAASG,IAAK,WAAaI,EAAON,aAAa,GAC9CJ,gBAACK,GAAUC,IAAK,UAAWC,SAAU,KAAMC,YAASJ,aAAa,GAC/DJ,gBAAC8B,GAAYD,QAASA,GACpB7B,gBAACmB,GAASC,IAAK,OAAQC,SAAU,KAAMU,OAAO,YAC3CH,EAAM/B,MAAM,EAAG,KAElBG,gBAACmB,GAASC,IAAK,QACZ,IACAY,EAAaN,MAAAA,aAAAA,EAASO,0BAATC,EAAgBD,MAAOP,MAAAA,aAAAA,EAASO,0BAATE,EAAgBC,SAAU,IAAI,MAIxEX,EAAWpC,KAAI,SAACgD,EAA4B3B,UAEzCV,gBAACK,GACCC,IAAK+B,EAAQ1B,KAAOD,EACpBE,gBAAgB,QAChBR,aAAa,GACbJ,gBAACsB,GAAWC,SAAUc,EAAQ1B,yBAkClDX,gBAACsC,OACCtC,gBAACuC,OAAkBxC,GACnBC,gBAACwC,OAAmBzC"}