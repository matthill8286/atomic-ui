{"version":3,"file":"AssetTeaser.js","sources":["../../../../../../src/components/Organisms/Teasers/AssetTeaser/AssetTeaser.tsx"],"sourcesContent":["import React from 'react'\nimport { useInView } from 'react-intersection-observer'\nimport { Surface } from '@/components/Atoms/Card'\nimport { NativeLazyLoadOptions, Picture } from '@/components/Atoms/Picture'\nimport { Tag } from '@/components/Atoms/Tag'\nimport { CopyText, Heading, HeadingFeatured } from '@/components/Atoms/Typography'\nimport { media, ALTERNATE, styled, ThemeConsumer } from '@/styles'\nimport { spacing } from '@/styles/sc-vars-global'\nimport { Theme } from '@/types/theme'\nimport {\n  TopTeaserBackgroundProps,\n  TopTeaserInfoProps,\n  TopTeaserMainHeadingProps,\n  TopTeaserProps,\n  TopTeaserTagsProps,\n} from './AssetTeaser.interface'\nimport {\n  StyledBackgroundImage,\n  StyledCard,\n  StyledBadgeWrapper,\n  StyledFlexBottomContainer,\n  StyledInfoContainer,\n  StyledInfoContainerContent,\n  StyledInfoTextContainer,\n  StyledLink,\n  StyledMainContainer,\n  StyledPictureContainer,\n  StyledAssetContainer,\n  StyledRect,\n  StyledTongue,\n  StyledTopTeaserTagWrapper,\n  StyledUpsetRect,\n  StyledWrapper,\n} from './AssetTeaser.styled'\nimport { Badge } from '@/components/Atoms/Badge'\n\nconst StyledFFSaturn = styled.div`\n  display: none;\n  ${({ theme }) =>\n    theme.name === ALTERNATE &&\n    `\n  ${media.md} {\n    display: block;\n  }\n\n  > svg {\n    position: absolute;\n    left: -1px;\n    top: 0;\n    z-index: 1;\n    height: 100%;\n    width: auto;\n\n    ${media.ie11} {\n      width: 100px;\n      top: -7px;\n    }\n  }`}\n`\n\nconst Info: React.FC<TopTeaserInfoProps> = ({ contentText, tags, limitLines }) => {\n  return (\n    <StyledInfoTextContainer>\n      <CopyText\n        fontSize=\"sm\"\n        lineHeight=\"sm\"\n        limitLines={limitLines ? limitLines : tags && tags.length > 0 ? 3 : 5}\n        tag=\"span\">\n        {contentText}\n      </CopyText>\n    </StyledInfoTextContainer>\n  )\n}\n\nconst Tags: React.FC<TopTeaserTagsProps> = ({ tags }) => {\n  if (tags && tags.length > 0) {\n    return (\n      <StyledFlexBottomContainer>\n        <StyledTopTeaserTagWrapper limitLines={2}>\n          {tags.map((t, index) => {\n            return t && t.trim().length > 0 ? (\n              <Tag key={'Tag_' + t + index} text={t} marginBottom marginRight />\n            ) : (\n              undefined\n            )\n          })}\n        </StyledTopTeaserTagWrapper>\n      </StyledFlexBottomContainer>\n    )\n  } else {\n    return null\n  }\n}\n\nconst Background: React.FC<TopTeaserBackgroundProps> = ({\n  backgroundVariant,\n  image,\n  imageDesktop,\n  lazyloadBackgroundImage,\n  hasAsset,\n  theme,\n}) => {\n  const [ref, inView] = useInView({\n    triggerOnce: true,\n  })\n  const hasQueryParams = image?.indexOf('?') !== -1\n  const imageUrl = imageDesktop ? imageDesktop : image\n\n  const lazyLoadImage = imageUrl ? `${imageUrl}${hasQueryParams ? '&' : '?'}q=1` : undefined\n\n  if (theme === ALTERNATE) {\n    return (\n      <StyledRect\n        ref={ref}\n        image={imageUrl}\n        inView={inView}\n        lazyLoadImage={lazyLoadImage}\n        hasAsset={hasAsset}\n        lazyloadBackgroundImage={lazyloadBackgroundImage}\n      />\n    )\n  } else {\n    switch (backgroundVariant) {\n      case 'tongue':\n        return (\n          <StyledTongue ref={ref} height={140}>\n            <StyledBackgroundImage\n              image={imageUrl}\n              inView={inView}\n              lazyLoadImage={lazyLoadImage}\n              hasAsset={hasAsset}\n              lazyloadBackgroundImage={lazyloadBackgroundImage}\n            />\n          </StyledTongue>\n        )\n      case 'upsetRect':\n        return <StyledUpsetRect ref={ref} image={imageUrl} hasAsset={hasAsset} />\n      case 'rect':\n        return (\n          <StyledRect\n            ref={ref}\n            image={imageUrl}\n            inView={inView}\n            lazyLoadImage={lazyLoadImage}\n            hasAsset={hasAsset}\n            lazyloadBackgroundImage={lazyloadBackgroundImage}\n          />\n        )\n    }\n  }\n}\n\nconst MainHeading: React.FC<TopTeaserMainHeadingProps> = ({ headline, themeName, limitLines }) => (\n  <HeadingFeatured fixedMdSize={themeName === ALTERNATE} limitLines={limitLines}>\n    {headline}\n  </HeadingFeatured>\n)\n\nexport const AssetTeaser: React.FC<TopTeaserProps> = ({\n  smallHeadline,\n  background = 'grey',\n  headline,\n  contentText,\n  assetImage,\n  backgroundImage,\n  backgroundImageDesktop,\n  lazyload,\n  lazyloadBackgroundImage,\n  tags,\n  limitLines,\n  backgroundVariant = 'upsetRect',\n  elevation = 0,\n  elevationHover,\n  link,\n  fixedImageHeight = false,\n  onClick,\n  clickableWithoutLink = true,\n  badges,\n  ...rest\n}) => {\n  const isClickable = (!!onClick && clickableWithoutLink) || !!link?.href\n  return (\n    <ThemeConsumer>\n      {(theme?: Theme) => {\n        return (\n          <StyledLink to={link?.to} href={link?.href} onClick={onClick} underline={false}>\n            <StyledWrapper>\n              <StyledCard\n                elevation={elevation}\n                elevationHover={elevationHover}\n                display=\"flex\"\n                fullHeight\n                noBorder={'none'}\n                surface={background as Surface}\n                badges={[]}\n                {...rest}>\n                <StyledMainContainer isClickable={isClickable}>\n                  <StyledInfoContainer\n                    backgroundVariant={backgroundVariant}\n                    hasTags={!!tags && tags.length > 0}\n                    hasAsset={!!assetImage}>\n                    {badges && badges.length > 0 && (\n                      <StyledBadgeWrapper>\n                        <Badge actionType=\"secondary\" badges={badges} />\n                      </StyledBadgeWrapper>\n                    )}\n                    <StyledInfoContainerContent hasBadges={Boolean(badges && badges.length > 0)}>\n                      {smallHeadline && (\n                        <Heading\n                          tag=\"p\"\n                          scale=\"level-5\"\n                          weight=\"semibold\"\n                          lineHeight=\"sm\"\n                          limitLines={1}\n                          limitWidth={theme?.name === ALTERNATE ? '300px' : '350px'}\n                          margin={`0 0 ${spacing.base.xs} 0`}\n                          uppercase>\n                          {smallHeadline}\n                        </Heading>\n                      )}\n                      <MainHeading headline={headline} themeName={theme?.name} limitLines={2} />\n                      <Info contentText={contentText} tags={tags} limitLines={limitLines} />\n                      <Tags tags={tags} />\n                    </StyledInfoContainerContent>\n                  </StyledInfoContainer>\n                  <StyledAssetContainer fixedImageHeight={fixedImageHeight}>\n                    <Background\n                      image={backgroundImage}\n                      imageDesktop={backgroundImageDesktop}\n                      lazyloadBackgroundImage={lazyloadBackgroundImage}\n                      backgroundVariant={backgroundVariant}\n                      hasAsset={!!assetImage}\n                      theme={theme?.name}\n                    />\n                    {assetImage && (\n                      <StyledPictureContainer>\n                        <Picture\n                          src={assetImage}\n                          height=\"100%\"\n                          loading={\n                            lazyload ? NativeLazyLoadOptions.Lazy : NativeLazyLoadOptions.Eager\n                          }\n                        />\n                      </StyledPictureContainer>\n                    )}\n                  </StyledAssetContainer>\n                </StyledMainContainer>\n              </StyledCard>\n            </StyledWrapper>\n          </StyledLink>\n        )\n      }}\n    </ThemeConsumer>\n  )\n}\n"],"names":["styled","div","theme","name","ALTERNATE","media","md","ie11","Info","contentText","tags","limitLines","React","StyledInfoTextContainer","CopyText","fontSize","lineHeight","length","tag","Tags","StyledFlexBottomContainer","StyledTopTeaserTagWrapper","map","t","index","trim","Tag","key","text","marginBottom","marginRight","undefined","Background","backgroundVariant","image","imageDesktop","lazyloadBackgroundImage","hasAsset","useInView","triggerOnce","ref","inView","hasQueryParams","indexOf","imageUrl","lazyLoadImage","StyledRect","StyledTongue","height","StyledBackgroundImage","StyledUpsetRect","MainHeading","headline","themeName","HeadingFeatured","fixedMdSize","AssetTeaser","smallHeadline","background","assetImage","backgroundImage","backgroundImageDesktop","lazyload","elevation","elevationHover","link","fixedImageHeight","onClick","clickableWithoutLink","badges","rest","isClickable","href","ThemeConsumer","StyledLink","to","underline","StyledWrapper","StyledCard","display","fullHeight","noBorder","surface","StyledMainContainer","StyledInfoContainer","hasTags","StyledBadgeWrapper","Badge","actionType","StyledInfoContainerContent","hasBadges","Boolean","Heading","scale","weight","limitWidth","margin","spacing","base","xs","uppercase","StyledAssetContainer","StyledPictureContainer","Picture","src","loading","NativeLazyLoadOptions","Lazy","Eager"],"mappings":"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"}