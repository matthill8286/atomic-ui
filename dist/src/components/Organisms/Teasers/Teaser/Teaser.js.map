{"version":3,"file":"Teaser.js","sources":["../../../../../../src/components/Organisms/Teasers/Teaser/Teaser.tsx"],"sourcesContent":["import React, { useState } from 'react'\n\nimport { useHistory } from 'react-router-dom'\nimport { Card } from '@/components/Atoms/Card'\nimport { Foldable } from '@/components/Atoms/Foldable'\nimport { Icon } from '@/components/Atoms/Icon'\nimport { Link } from '@/components/Atoms/Link'\nimport { Picture } from '@/components/Atoms/Picture'\nimport { SkeletonBlockItem, SkeletonInlineItem } from '@/components/Atoms/Skeleton'\nimport { CopyText, HeadingFeatured } from '@/components/Atoms/Typography'\nimport { useWindowDimensions } from '@/components/Helper/useWindowDimensions'\nimport { DANONE } from '@/styles'\nimport { breakpoints } from '@/styles/sc-vars-global'\nimport { IconArrow } from '@/svgs'\nimport { isAlternateTheme, useTheme } from '@/utils/helper'\n\nimport { useGraphCmsImages } from '@/utils/useGraphCmsImages'\nimport {\n  ChevronProps,\n  TeaserContentTextProps,\n  FoldableWrapperProps,\n  TeaserHeadingProps,\n  ImageProps,\n  LinkListProps,\n  MainLinkProps,\n  TeaserProps,\n} from './Teaser.interface'\nimport {\n  isPortrait,\n  StyledContentContainer,\n  StyledDummyLink,\n  StyledHeadingContainer,\n  StyledIcon,\n  StyledInfoTextChildren,\n  StyledInfoTextContainer,\n  StyledLinkContainer,\n  StyledLinkListContainer,\n  StyledLinkListItemSpace,\n  StyledPictureContainer,\n  StyledResponsiveContainer,\n  StyledTeaser,\n  StyledTextLinkContainer,\n} from './Teaser.styled'\n\nconst DEFAULT_LINE_LIMIT = 2\n\nconst Image: React.FC<ImageProps> = ({ image, withImagePadding, orientation, loading, alt }) => {\n  if (image) {\n    return (\n      <StyledPictureContainer withImagePadding={withImagePadding} orientation={orientation}>\n        {loading ? (\n          <SkeletonBlockItem height=\"100%\" width=\"100%\" />\n        ) : (\n          <Picture\n            alt={alt}\n            src={image}\n            height=\"100%\"\n            width=\"100%\"\n            objectFit={withImagePadding ? 'contain' : 'cover'}\n          />\n        )}\n      </StyledPictureContainer>\n    )\n  }\n  return null\n}\n\nconst MainHeading: React.FC<TeaserHeadingProps> = ({\n  headline,\n  headlineLimitLines = DEFAULT_LINE_LIMIT,\n  loading,\n  orientation,\n}) => {\n  const { name } = useTheme()\n  if (loading) {\n    return <SkeletonInlineItem fontSize=\"xl\" length={15} />\n  }\n  return (\n    <HeadingFeatured\n      fixedMdSize={name === DANONE}\n      fixedSize={isPortrait(orientation) ? 'xl' : undefined}\n      limitLines={headlineLimitLines}>\n      {headline}\n    </HeadingFeatured>\n  )\n}\n/**\n * Renders the mainLink only if link and link label is given.\n */\nconst MainLink: React.FC<MainLinkProps> = ({\n  color,\n  decorationColor,\n  dummyMainLink = false,\n  isSmall,\n  loading,\n  mainLink,\n}) => {\n  if (mainLink && mainLink.label) {\n    const kindOfLink = mainLink.to ? { to: mainLink.to } : { href: mainLink.href }\n    return loading ? (\n      <StyledTextLinkContainer isSmall={isSmall}>\n        <SkeletonBlockItem height=\"20px\" width=\"100px\" />\n      </StyledTextLinkContainer>\n    ) : (\n      <StyledTextLinkContainer isSmall={isSmall}>\n        <Link\n          fontSize=\"sm\"\n          iconLeft={\n            <Icon color={decorationColor || 'primary'}>\n              <IconArrow />\n            </Icon>\n          }\n          scale=\"small\"\n          {...(decorationColor && { decorationColor })}\n          {...(color && { color })}\n          {...kindOfLink}>\n          {mainLink.label}\n        </Link>\n      </StyledTextLinkContainer>\n    )\n  } else if (dummyMainLink) {\n    return <StyledDummyLink>{'\\u00A0'}</StyledDummyLink>\n  }\n\n  return null\n}\n\n/**\n * Renders a Chevron for foldable or main link.\n * Renders the mainLink only without a link label. If link label is set, nothing will be rendered.\n */\nconst Chevron: React.FC<ChevronProps> = ({\n  isAlternate,\n  isFoldable,\n  isOpen,\n  isSmall = true,\n  mainLink,\n}) => {\n  if (isFoldable) {\n    return (\n      <StyledLinkContainer isSmall={isSmall}>\n        <StyledIcon\n          height=\"sm\"\n          width=\"sm\"\n          color={isAlternate ? 'grey4' : 'primary'}\n          rotate={isOpen ? 0 : 180}\n          isSmall={isSmall}\n          hasMarginLeft>\n          <IconArrow />\n        </StyledIcon>\n      </StyledLinkContainer>\n    )\n  } else if (mainLink && !mainLink.label && (mainLink.to || mainLink.href)) {\n    return (\n      <StyledLinkContainer isSmall={isSmall}>\n        <StyledIcon height=\"sm\" width=\"sm\" color=\"primary\" isSmall={isSmall} hasMarginLeft>\n          <IconArrow />\n        </StyledIcon>\n      </StyledLinkContainer>\n    )\n  } else {\n    return null\n  }\n}\n\nconst ContentText: React.FC<TeaserContentTextProps> = ({ contentText, children, loading }) => {\n  const { breakpoint: currentBreakpoint } = useWindowDimensions()\n  const isMobile = currentBreakpoint < breakpoints.sm\n\n  if (loading) {\n    return (\n      <React.Fragment>\n        <SkeletonInlineItem margin=\"md 0 xxs\" />\n        <SkeletonBlockItem height=\"20px\" width=\"200px\" />\n      </React.Fragment>\n    )\n  }\n\n  if (contentText || children) {\n    return (\n      <StyledInfoTextContainer>\n        {contentText && (\n          <CopyText\n            limitLines={5}\n            fontSize=\"sm\"\n            lineHeight={isMobile ? 'xs' : 'sm'}\n            margin=\"sm 0 0 0\">\n            {contentText}\n          </CopyText>\n        )}\n        {children && <StyledInfoTextChildren>{children}</StyledInfoTextChildren>}\n      </StyledInfoTextContainer>\n    )\n  } else {\n    return null\n  }\n}\n\nconst LinkList: React.FC<LinkListProps> = ({ linkList }) => {\n  if (linkList && linkList.length > 0) {\n    const linkComponents = new Array<React.ReactElement>()\n\n    for (let i = 0; i < linkList.length; i++) {\n      const l = linkList[i]\n\n      // add space between the links\n      if (i > 0) {\n        linkComponents.push(<StyledLinkListItemSpace key={'space_' + l.label} />)\n      }\n\n      // add link\n      linkComponents.push(\n        <Link key={l.label + '_' + l.to} scale=\"large\" to={l.to}>\n          {l.label}\n        </Link>\n      )\n    }\n\n    return <StyledLinkListContainer>{linkComponents}</StyledLinkListContainer>\n  } else {\n    return null\n  }\n}\n\nconst FoldableWrapper: React.FC<FoldableWrapperProps> = ({ children, isFoldable, isOpen }) => {\n  if (isFoldable) {\n    return <Foldable isOpen={isOpen}>{children}</Foldable>\n  } else {\n    return <>{children}</>\n  }\n}\n\nexport const Teaser: React.FC<TeaserProps> = ({\n  badgeActionType,\n  badges,\n  children,\n  color,\n  contentText,\n  decorationColor,\n  borderColor,\n  dummyMainLink = false,\n  elevation = 0,\n  elevationHover = 4,\n  foldable = 'never',\n  growHeadline = false,\n  headline,\n  headlineLimitLines = DEFAULT_LINE_LIMIT,\n  icon,\n  image,\n  altText,\n  lazyloadLowQuality = false,\n  linkList,\n  loading = false,\n  mainLink,\n  onClick,\n  orientation = 'auto',\n  withImagePadding = false,\n  contentful = false,\n  ...rest\n}) => {\n  const { breakpoint: currentBreakpoint } = useWindowDimensions()\n  const history = useHistory()\n  const isMobile = currentBreakpoint < breakpoints.sm\n  const isFoldable = foldable === 'always' || (foldable === 'mobile' && isMobile)\n  const [isOpen, setOpen] = useState(!isFoldable)\n  const hasLinkList: boolean = !!linkList && linkList.length > 0\n  const isAlternate = isAlternateTheme()\n\n  const onTeaserClick = React.useCallback(\n    (event: React.MouseEvent) => {\n      if (typeof onClick === 'function') {\n        onClick(event)\n      }\n\n      if (isFoldable && !isOpen) {\n        setOpen(true)\n        return\n      }\n\n      if (isFoldable && isOpen && (!mainLink || !mainLink.label) && !hasLinkList) {\n        // close only if there is no link inside\n        setOpen(false)\n        return\n      }\n\n      if (!isFoldable && mainLink) {\n        // navigate to mainLink\n        if (mainLink.to) return history.push(mainLink.to)\n        if (mainLink.href) return (window.location.href = mainLink.href)\n      }\n    },\n    [hasLinkList, history, isFoldable, isOpen, mainLink, onClick, setOpen]\n  )\n\n  const onHeadingClick = React.useCallback(() => {\n    if (isFoldable && isOpen) {\n      setOpen(false)\n    }\n  }, [isFoldable, isOpen, setOpen])\n\n  const [finalImages, ref] = useGraphCmsImages([image], !lazyloadLowQuality)\n\n  return (\n    <StyledTeaser\n      ref={ref}\n      onClick={onTeaserClick}\n      hasLinkList={hasLinkList}\n      isOpen={isOpen}\n      orientation={orientation}\n      {...rest}>\n      <Card\n        elevation={elevation}\n        elevationHover={hasLinkList ? 0 : elevationHover}\n        shape=\"rounded-big\"\n        display=\"flex\"\n        badges={badges}\n        borderColor={borderColor}\n        badgeActionType={badgeActionType}>\n        <StyledResponsiveContainer orientation={orientation}>\n          <Image\n            image={finalImages[0]}\n            withImagePadding={withImagePadding}\n            orientation={orientation}\n            loading={loading}\n            alt={altText}\n          />\n          <StyledContentContainer>\n            <StyledHeadingContainer onClick={onHeadingClick} growHeadline={growHeadline}>\n              <MainHeading\n                headline={headline}\n                headlineLimitLines={headlineLimitLines}\n                loading={loading}\n                orientation={orientation}\n              />\n              <Chevron\n                isAlternate={isAlternate}\n                isFoldable={isFoldable}\n                isOpen={isOpen}\n                mainLink={mainLink}\n              />\n            </StyledHeadingContainer>\n            {icon && (\n              <StyledIcon color=\"primary\" hasMarginTop>\n                {icon}\n              </StyledIcon>\n            )}\n            <FoldableWrapper isFoldable={isFoldable} isOpen={isOpen}>\n              <ContentText contentText={contentText} loading={loading}>\n                {children}\n              </ContentText>\n              <LinkList linkList={linkList} />\n              <MainLink\n                color={color}\n                decorationColor={decorationColor}\n                dummyMainLink={dummyMainLink}\n                loading={loading}\n                mainLink={mainLink}\n              />\n            </FoldableWrapper>\n          </StyledContentContainer>\n        </StyledResponsiveContainer>\n      </Card>\n    </StyledTeaser>\n  )\n}\n"],"names":["Image","image","withImagePadding","orientation","loading","alt","React","StyledPictureContainer","SkeletonBlockItem","height","width","Picture","src","objectFit","MainHeading","headline","headlineLimitLines","name","useTheme","SkeletonInlineItem","fontSize","length","HeadingFeatured","fixedMdSize","DANONE","fixedSize","isPortrait","undefined","limitLines","MainLink","color","decorationColor","dummyMainLink","isSmall","mainLink","label","kindOfLink","to","href","StyledTextLinkContainer","Link","iconLeft","Icon","IconArrow","scale","StyledDummyLink","Chevron","isAlternate","isFoldable","isOpen","StyledLinkContainer","StyledIcon","rotate","hasMarginLeft","ContentText","contentText","children","isMobile","useWindowDimensions","breakpoint","breakpoints","sm","Fragment","margin","StyledInfoTextContainer","CopyText","lineHeight","StyledInfoTextChildren","LinkList","linkList","linkComponents","Array","i","l","push","StyledLinkListItemSpace","key","StyledLinkListContainer","FoldableWrapper","Foldable","Teaser","badgeActionType","badges","borderColor","elevation","elevationHover","foldable","growHeadline","icon","altText","lazyloadLowQuality","onClick","contentful","rest","currentBreakpoint","history","useHistory","useState","setOpen","hasLinkList","isAlternateTheme","onTeaserClick","useCallback","event","window","location","onHeadingClick","useGraphCmsImages","finalImages","ref","StyledTeaser","Card","shape","display","StyledResponsiveContainer","StyledContentContainer","StyledHeadingContainer","hasMarginTop"],"mappings":"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"}