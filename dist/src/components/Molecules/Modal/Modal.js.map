{"version":3,"file":"Modal.js","sources":["../../../../../src/components/Molecules/Modal/Modal.tsx"],"sourcesContent":["import { clearAllBodyScrollLocks, disableBodyScroll } from 'body-scroll-lock'\nimport * as React from 'react'\nimport { Heading } from '@/components/Atoms/Typography'\nimport { StyleguideClose } from '@excelwithbusiness/webmobile-svg-library'\nimport { useWindowDimensions } from '@/components/Helper/useWindowDimensions'\nimport { ModalButtonGroup } from '@/components/Molecules/ModalButtonGroup'\nimport { ModalHeadingProps, ModalProps } from './Modal.interface'\nimport {\n  ModalWrapper,\n  StlyedLeftContent,\n  StyledIcon,\n  StyledModalBackground,\n  StyledModalContent,\n  StyledModalDesktopWrapper,\n  StyledModalHeader,\n  StyledModalInnerWrapper,\n} from './Modal.styled'\n\nexport const ModalHeading: React.FC<ModalHeadingProps> = ({ children, color }) => (\n  <Heading margin=\"0\" textAlign=\"center\" weight=\"semibold\" scale=\"level-3\" tag=\"h1\" color={color}>\n    {children}\n  </Heading>\n)\n\nexport const Modal: React.FC<ModalProps> = ({\n  buttonAlignment = 'space-between',\n  children,\n  className,\n  contentBgColor,\n  onClose,\n  animation,\n  position = 'top',\n  primaryButtonProps,\n  secondaryButtonProps,\n  showButtonSeparator,\n  size = 'lg',\n  title,\n  paddingSize = 'md',\n  withScrollableContent = false,\n  hideCloseButton = false,\n  isWhite = false,\n  canClose = true,\n}): JSX.Element => {\n  const { breakpointName } = useWindowDimensions()\n  const modalDesktopWrapper = React.useRef<HTMLDivElement>(null)\n  const modalInnerWrapper = React.useRef<HTMLDivElement>(null)\n  const modalWrapper = React.useRef<HTMLDivElement>(null)\n\n  React.useEffect(() => {\n    if (breakpointName === 'xs') {\n      disableBodyScroll(modalDesktopWrapper?.current)\n    } else if (withScrollableContent) {\n      disableBodyScroll(modalInnerWrapper?.current)\n    } else {\n      disableBodyScroll(modalWrapper?.current)\n    }\n    return () => clearAllBodyScrollLocks()\n  }, [modalDesktopWrapper, modalInnerWrapper, modalWrapper, breakpointName, withScrollableContent])\n\n  const handleClick = (method?: () => void) => (ev?: React.MouseEvent) => {\n    if (ev) {\n      ev.stopPropagation()\n    }\n    if (method) method()\n  }\n\n  const hasTitle = !!title\n\n  const renderHeaderContent = () => (\n    <>\n      {!hideCloseButton && <StlyedLeftContent />}\n      {hasTitle && (\n        <div>{typeof title === 'string' ? <ModalHeading>{title}</ModalHeading> : <>{title}</>}</div>\n      )}\n      {!hideCloseButton && (\n        <StyledIcon width={30} height={30} color=\"grey5\" onClick={handleClick(onClose)}>\n          <StyleguideClose data-test=\"modal-close-button\" />\n        </StyledIcon>\n      )}\n    </>\n  )\n\n  return (\n    <ModalWrapper id=\"filtered-styled-modal-wrapper\" className={className} ref={modalWrapper}>\n      <StyledModalBackground\n        isWhite={isWhite}\n        onClick={canClose ? handleClick(onClose) : undefined}\n      />\n      <StyledModalInnerWrapper\n        paddingSize={paddingSize}\n        contentBgColor={contentBgColor}\n        size={size}\n        position={position}\n        animation={animation}\n        onClick={ev => ev.stopPropagation()}\n        withScrollableContent={withScrollableContent}\n        ref={modalInnerWrapper}>\n        <StyledModalHeader hasTitle={hasTitle}>{renderHeaderContent()}</StyledModalHeader>\n        <StyledModalDesktopWrapper\n          id=\"filtered-styled-modal-desktop-wrapper\"\n          ref={modalDesktopWrapper}>\n          <StyledModalContent>{children}</StyledModalContent>\n          <ModalButtonGroup\n            buttonAlignment={buttonAlignment}\n            primaryButtonProps={primaryButtonProps}\n            secondaryButtonProps={secondaryButtonProps}\n            showButtonSeparator={showButtonSeparator}\n          />\n        </StyledModalDesktopWrapper>\n      </StyledModalInnerWrapper>\n    </ModalWrapper>\n  )\n}\n\nModal.displayName = 'Modal'\n"],"names":["ModalHeading","children","color","React","Heading","margin","textAlign","weight","scale","tag","Modal","buttonAlignment","className","contentBgColor","onClose","animation","position","primaryButtonProps","secondaryButtonProps","showButtonSeparator","size","title","paddingSize","withScrollableContent","hideCloseButton","isWhite","canClose","breakpointName","useWindowDimensions","modalDesktopWrapper","useRef","modalInnerWrapper","modalWrapper","useEffect","disableBodyScroll","current","clearAllBodyScrollLocks","handleClick","method","ev","stopPropagation","hasTitle","ModalWrapper","id","ref","StyledModalBackground","onClick","undefined","StyledModalInnerWrapper","StyledModalHeader","StlyedLeftContent","StyledIcon","width","height","StyleguideClose","StyledModalDesktopWrapper","StyledModalContent","ModalButtonGroup","displayName"],"mappings":"2uBAkBaA,EAA4C,gBAAGC,IAAAA,SAAUC,IAAAA,aACpEC,gBAACC,GAAQC,OAAO,IAAIC,UAAU,SAASC,OAAO,WAAWC,MAAM,UAAUC,IAAI,KAAKP,MAAOA,GACtFD,IAIQS,EAA8B,oBACzCC,gBAAAA,aAAkB,kBAClBV,IAAAA,SACAW,IAAAA,UACAC,IAAAA,eACAC,IAAAA,QACAC,IAAAA,cACAC,SAAAA,aAAW,QACXC,IAAAA,mBACAC,IAAAA,qBACAC,IAAAA,wBACAC,KAAAA,aAAO,OACPC,IAAAA,UACAC,YAAAA,aAAc,WACdC,sBAAAA,oBACAC,gBAAAA,oBACAC,QAAAA,oBACAC,SAAAA,gBAEQC,EAAmBC,IAAnBD,eACFE,EAAsB1B,EAAM2B,OAAuB,MACnDC,EAAoB5B,EAAM2B,OAAuB,MACjDE,EAAe7B,EAAM2B,OAAuB,MAElD3B,EAAM8B,WAAU,kBAEZC,EADqB,OAAnBP,EACgBE,MAAAA,SAAAA,EAAqBM,QAC9BZ,EACSQ,MAAAA,SAAAA,EAAmBI,QAEnBH,MAAAA,SAAAA,EAAcG,SAE3B,kBAAMC,OACZ,CAACP,EAAqBE,EAAmBC,EAAcL,EAAgBJ,QAEpEc,EAAc,SAACC,UAAwB,SAACC,GACxCA,GACFA,EAAGC,kBAEDF,GAAQA,MAGRG,IAAapB,SAiBjBlB,gBAACuC,GAAaC,GAAG,gCAAgC/B,UAAWA,EAAWgC,IAAKZ,GAC1E7B,gBAAC0C,GACCpB,QAASA,EACTqB,QAASpB,EAAWW,EAAYvB,QAAWiC,IAE7C5C,gBAAC6C,GACC1B,YAAaA,EACbT,eAAgBA,EAChBO,KAAMA,EACNJ,SAAUA,EACVD,UAAWA,EACX+B,QAAS,SAAAP,UAAMA,EAAGC,mBAClBjB,sBAAuBA,EACvBqB,IAAKb,GACL5B,gBAAC8C,GAAkBR,SAAUA,GA5BjCtC,iCACIqB,GAAmBrB,gBAAC+C,QACrBT,GACCtC,2BAAuB,iBAAVkB,EAAqBlB,gBAACH,OAAcqB,GAAwBlB,gCAAGkB,KAE5EG,GACArB,gBAACgD,GAAWC,MAAO,GAAIC,OAAQ,GAAInD,MAAM,QAAQ4C,QAAST,EAAYvB,IACpEX,gBAACmD,eAA0B,0BAsB7BnD,gBAACoD,GACCZ,GAAG,wCACHC,IAAKf,GACL1B,gBAACqD,OAAoBvD,GACrBE,gBAACsD,GACC9C,gBAAiBA,EACjBM,mBAAoBA,EACpBC,qBAAsBA,EACtBC,oBAAqBA,QAQjCT,EAAMgD,YAAc"}