{"version":3,"file":"GroupedActionLinks.js","sources":["../../../../../../src/components/Molecules/ActionLink/GroupedActionLinks/GroupedActionLinks.tsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react'\nimport { breakpoints, css, styled } from '@/styles'\nimport { useDropdownState, useWindowDimensions } from '@/components/Helper'\nimport { StyledDropdown } from '@/components/Molecules/DropdownButton'\nimport { PaddingMap, ThemeColors, ThemeFontSizes, VerticalPaddingMap } from '@/types'\nimport { ActionLink } from '../ActionLink'\nimport { QuickAction } from '../ActionLink.interface'\nimport { getActionLinkType } from '../helper'\n\nexport type GroupedActionLinksProps = {\n  links: QuickAction[]\n  fontSize: ThemeFontSizes\n  color: ThemeColors\n  flexed?: boolean\n  padding?: PaddingMap\n  dropdownFlexed?: boolean\n}\n\nconst StyledWrapper = styled.div<{\n  flexed: boolean\n  padding?: string | VerticalPaddingMap | undefined\n}>(\n  ({ theme, flexed }) => css`\n    list-style: none;\n    display: ${flexed ? `flex` : `inline-flex`};\n    margin-top: 0;\n    margin-right: ${!flexed ? theme.spacing.base.sm : 0};\n\n    :hover {\n      cursor: pointer;\n      ${flexed && `background: ${theme.color.grey2};`};\n    }\n  `\n)\n\nconst StyleDropdownWrapper = styled.div`\n  display: flex;\n`\n\nconst StyledReference = styled.div`\n  position: relative;\n  display: flex;\n  flex-grow: 1;\n\n  > a {\n    flex-grow: 1;\n  }\n`\n\nexport const GroupedActionLinks: ({\n  links,\n  fontSize,\n  color,\n  padding,\n  flexed,\n  dropdownFlexed,\n  testIdSuffix,\n}: {\n  links: QuickAction[]\n  fontSize: ThemeFontSizes\n  color: ThemeColors\n  padding?: PaddingMap\n  flexed?: boolean\n  dropdownFlexed?: boolean\n  testIdSuffix?: string\n}) => JSX.Element = ({\n  links,\n  fontSize,\n  color,\n  padding,\n  flexed = false,\n  testIdSuffix,\n  dropdownFlexed,\n}) => {\n  const { element, toggleDropdown, showDropdown } = useDropdownState<HTMLDivElement>()\n  const { breakpoint: currentBreakpoint } = useWindowDimensions()\n  const isMobile = currentBreakpoint < breakpoints.md\n  const ref = useRef<HTMLElement>(null)\n\n  const onToggleDropdown = () => {\n    toggleDropdown()\n  }\n\n  const handleMenuItemClick = item => {\n    if (showDropdown) {\n      toggleDropdown()\n    }\n  }\n\n  const handleClickOutside = (event: Event): void => {\n    if (!ref.current?.contains(event.target as Node) && showDropdown) {\n      toggleDropdown()\n    }\n  }\n\n  useEffect(() => {\n    document.addEventListener('click', handleClickOutside)\n\n    return () => {\n      document.removeEventListener('click', handleClickOutside)\n    }\n  })\n\n  const ActionMenuContent = ({ navActionList }) => (\n    <GroupedActionLinks\n      flexed={dropdownFlexed}\n      links={navActionList}\n      fontSize=\"sm\"\n      color=\"grey5\"\n      key=\"GroupedActionLinks\"\n      padding={padding}\n    />\n  )\n\n  return (\n    <>\n      {links.map((quickAction: QuickAction, index) => {\n        const linkProp = getActionLinkType(quickAction)\n        return (\n          <StyledWrapper\n            key={`Link-${index++}|${quickAction.id}`}\n            padding={padding}\n            flexed={flexed}>\n            <StyledReference ref={element} data-test={`grouped-action-links-${testIdSuffix}`}>\n              <ActionLink\n                key={quickAction.id}\n                inline={!flexed}\n                color={color}\n                fontSize={fontSize}\n                branded={quickAction.branded}\n                target={quickAction.target}\n                onClick={quickAction?.links?.length ? onToggleDropdown : quickAction.onClick}\n                {...(!quickAction?.links?.length ? linkProp : {})}>\n                {quickAction.actionLabel}\n              </ActionLink>\n              {quickAction?.links?.length > 0 && (\n                <StyleDropdownWrapper key={`InnerLink-${index++}|${quickAction.id}`}>\n                  <StyledDropdown isMobile={isMobile} surface=\"white\" showDropdown={showDropdown}>\n                    <ActionMenuContent navActionList={quickAction.links} />\n                  </StyledDropdown>\n                </StyleDropdownWrapper>\n              )}\n            </StyledReference>\n          </StyledWrapper>\n        )\n      })}\n    </>\n  )\n}\n"],"names":["StyledWrapper","styled","div","theme","flexed","css","spacing","base","sm","color","grey2","StyleDropdownWrapper","StyledReference","GroupedActionLinks","links","fontSize","padding","testIdSuffix","dropdownFlexed","useDropdownState","element","toggleDropdown","showDropdown","isMobile","useWindowDimensions","breakpoint","breakpoints","md","ref","useRef","onToggleDropdown","handleClickOutside","event","current","_ref$current","contains","target","useEffect","document","addEventListener","removeEventListener","ActionMenuContent","navActionList","React","key","map","quickAction","index","linkProp","getActionLinkType","id","ActionLink","inline","branded","onClick","length","_quickAction$links2","actionLabel","StyledDropdown","surface"],"mappings":"kmBAkBA,IAAMA,EAAgBC,EAAOC,4FAAPD,EAIpB,gBAAGE,IAAAA,MAAOC,IAAAA,cAAaC,4FAEVD,uBAEMA,EAAiC,EAAxBD,EAAMG,QAAQC,KAAKC,GAIzCJ,yBAAyBD,EAAMM,MAAMC,eAKvCC,EAAuBV,EAAOC,mGAAPD,oBAIvBW,EAAkBX,EAAOC,8FAAPD,mEAUXY,EAgBO,SAhBPA,SAiBXC,IAAAA,MACAC,IAAAA,SACAN,IAAAA,MACAO,IAAAA,YACAZ,OAAAA,gBACAa,IAAAA,aACAC,IAAAA,iBAEkDC,IAA1CC,IAAAA,QAASC,IAAAA,eAAgBC,IAAAA,aAE3BC,EADoCC,IAAlCC,WAC6BC,EAAYC,GAC3CC,EAAMC,EAAoB,MAE1BC,EAAmB,WACvBT,KASIU,EAAqB,SAACC,mBACrBJ,EAAIK,sBAAJC,EAAaC,SAASH,EAAMI,UAAmBd,GAClDD,KAIJgB,GAAU,kBACRC,SAASC,iBAAiB,QAASR,GAE5B,WACLO,SAASE,oBAAoB,QAAST,WAIpCU,EAAoB,gBAAGC,IAAAA,qBAC3BC,gBAAC9B,GACCT,OAAQc,EACRJ,MAAO4B,EACP3B,SAAS,KACTN,MAAM,QACNmC,IAAI,qBACJ5B,QAASA,YAKX2B,gCACG7B,EAAM+B,KAAI,SAACC,EAA0BC,aAC9BC,EAAWC,EAAkBH,UAEjCH,gBAAC3C,GACC4C,mBAAaG,gBAAWD,EAAYI,IACpClC,QAASA,EACTZ,OAAQA,GACRuC,gBAAC/B,GAAgBgB,IAAKR,6CAA4CH,IAChE0B,gBAACQ,KACCP,IAAKE,EAAYI,GACjBE,QAAShD,EACTK,MAAOA,EACPM,SAAUA,EACVsC,QAASP,EAAYO,QACrBjB,OAAQU,EAAYV,OACpBkB,QAASR,MAAAA,aAAAA,EAAahC,sBAAOyC,OAASzB,EAAmBgB,EAAYQ,SAC/DR,MAAAA,aAAAA,EAAahC,oBAAb0C,EAAoBD,OAAoB,GAAXP,GAClCF,EAAYW,cAEdX,MAAAA,aAAAA,EAAahC,4BAAOyC,QAAS,GAC5BZ,gBAAChC,GAAqBiC,wBAAkBG,gBAAWD,EAAYI,KAC7DP,gBAACe,GAAenC,SAAUA,EAAUoC,QAAQ,QAAQrC,aAAcA,GAChEqB,gBAACF,GAAkBC,cAAeI,EAAYhC"}