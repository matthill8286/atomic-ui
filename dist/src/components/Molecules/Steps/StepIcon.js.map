{"version":3,"file":"StepIcon.js","sources":["../../../../../src/components/Molecules/Steps/StepIcon.tsx"],"sourcesContent":["import React, { cloneElement, FC, isValidElement } from 'react'\nimport { Typo } from '@/components/Atoms/Typography'\nimport { css, styled } from '@/styles/styled'\nimport { ThemeColors } from '@/types/theme'\nimport { StepIconProps, StepsVariant } from './Steps.interface'\n\nconst FlexCenter = css`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-shrink: 0;\n`\n\nconst StepIconRoot = styled.div<{ variant: StepsVariant; active: boolean }>`\n  margin-top: ${({ theme, variant, active }) =>\n    variant === 'simple' && !active ? '12px' : `${theme.defaultSpacing}px`};\n  margin-bottom: ${({ variant, active }) => (variant === 'simple' && !active ? '2px' : '0')};\n  position: relative;\n  z-index: 1;\n  ${FlexCenter}\n`\n\nconst Circle = styled.div<{ active: boolean; completed: boolean; color: ThemeColors }>`\n  border: ${({ active, completed }) => (completed ? '6px' : active ? '4px' : '4px')} solid\n    ${({ theme, active, completed, color }) =>\n      theme.color[active ? color : completed ? 'white' : `grey2`]};\n  border-radius: 50%;\n  width: ${({ completed }) => (completed ? '40px' : '24px')};\n  height: ${({ completed }) => (completed ? '40px' : '24px')};\n  background-color: ${({ theme, active, completed, color }) =>\n    theme.color[active ? `white` : completed ? color : 'grey2']};\n  box-shadow: ${({ active, completed }) => (active || completed ? '2px 2px 4px' : '0 0 0')}\n    ${({ theme }) => theme.color['grey2']};\n  ${FlexCenter}\n`\n\nconst Checkmark = styled.div<{ active: boolean; color: ThemeColors }>`\n  position: relative;\n  display: inline-block;\n  width: ${({ theme }) => theme.spacing.base.lg};\n  height: ${({ theme }) => theme.spacing.base.lg};\n\n  ::before {\n    position: absolute;\n    left: 0;\n    top: 13px;\n    height: 31%;\n    width: 2px;\n    background-color: ${({ theme }) => theme.color['white']};\n    content: '';\n    transform: translateX(12px) rotate(-45deg);\n    transform-origin: left bottom;\n  }\n\n  ::after {\n    position: absolute;\n    left: 0;\n    bottom: 9px;\n    height: 2px;\n    width: 55%;\n    background-color: ${({ theme }) => theme.color['white']};\n    content: '';\n    transform: translateX(12px) rotate(-45deg);\n    transform-origin: left bottom;\n  }\n`\n\nconst Point = styled.div<{ backgroundColor: ThemeColors; active: boolean }>(\n  ({ theme, active, backgroundColor }) => ({\n    border: `2px solid ${theme.color[backgroundColor]}`,\n    backgroundColor: theme.color[backgroundColor],\n    borderRadius: '50%',\n    width: active ? 12 : 6,\n    height: active ? 12 : 6,\n  })\n)\n\nexport const StepIcon: FC<StepIconProps> = props => {\n  const {\n    active = false,\n    completed = false,\n    color = 'primary',\n    variant = 'prominent',\n    customIcon,\n    ...other\n  } = props\n\n  const renderIcon = () => {\n    if (customIcon && isValidElement(customIcon)) {\n      return (\n        <Circle active={active} completed={completed} color={color}>\n          {cloneElement(customIcon, { active, completed, color })}\n        </Circle>\n      )\n    }\n\n    if (variant === 'simple') {\n      return <Point backgroundColor={active || completed ? color : 'grey2'} active={active} />\n    }\n\n    return (\n      <Circle active={active} completed={completed} color={color}>\n        {completed ? (\n          <Checkmark active={active} color={color} />\n        ) : (\n          <Typo color={active ? 'white' : color}></Typo>\n        )}\n      </Circle>\n    )\n  }\n\n  return (\n    <StepIconRoot variant={variant} active={active} {...other}>\n      {renderIcon()}\n    </StepIconRoot>\n  )\n}\n\nStepIcon.displayName = 'StepIcon'\n"],"names":["FlexCenter","css","StepIconRoot","styled","div","theme","variant","active","defaultSpacing","Circle","completed","color","Checkmark","spacing","base","lg","Point","backgroundColor","border","borderRadius","width","height","StepIcon","props","customIcon","other","React","isValidElement","cloneElement","Typo","displayName"],"mappings":"4RAMA,IAAMA,EAAaC,6EAObC,EAAeC,EAAOC,iFAAPD,uEACL,gBAAGE,IAAAA,MAAOC,IAAAA,QAASC,IAAAA,aACnB,WAAZD,GAAyBC,YAAqBF,EAAMG,qBAAlB,UACnB,gBAAGF,IAAAA,QAASC,IAAAA,aAA0B,WAAZD,GAAyBC,EAAiB,IAAR,QAG3EP,GAGES,EAASN,EAAOC,2EAAPD,8GACH,cAAGI,gBAAQG,UAA6B,MAAiB,SAC/D,gBAAGL,IAAAA,MAAOE,IAAAA,OAAQG,IAAAA,UAAWC,IAAAA,aAC7BN,EAAMM,MAAMJ,EAASI,EAAQD,EAAY,oBAEpC,qBAAGA,UAA6B,OAAS,UACxC,qBAAGA,UAA6B,OAAS,UAC/B,gBAAGL,IAAAA,MAAOE,IAAAA,OAAQG,IAAAA,UAAWC,IAAAA,aAC/CN,EAAMM,MAAMJ,UAAmBG,EAAYC,EAAQ,YACvC,gBAAGJ,IAAAA,OAAQG,IAAAA,iBAAiBH,GAAUG,EAAY,cAAgB,WAC5E,qBAAGL,MAAkBM,MAAN,QACjBX,GAGEY,EAAYT,EAAOC,8EAAPD,oZAGP,qBAAGE,MAAkBQ,QAAQC,KAAKC,MACjC,qBAAGV,MAAkBQ,QAAQC,KAAKC,MAQtB,qBAAGV,MAAkBM,MAAN,SAYf,qBAAGN,MAAkBM,MAAN,SAOjCK,EAAQb,EAAOC,0EAAPD,EACZ,gBAAGE,IAAAA,MAAOE,IAAAA,OAAQU,IAAAA,sBAAuB,CACvCC,2BAAqBb,EAAMM,MAAMM,IACjCA,gBAAiBZ,EAAMM,MAAMM,GAC7BE,aAAc,MACdC,MAAOb,EAAS,GAAK,EACrBc,OAAQd,EAAS,GAAK,MAIbe,EAA8B,SAAAC,SAQrCA,EANFhB,OAAAA,kBAMEgB,EALFb,UAAAA,kBAKEa,EAJFZ,MAAAA,aAAQ,cAINY,EAHFjB,QAAAA,aAAU,cACVkB,EAEED,EAFFC,WACGC,IACDF,gEA2BFG,gBAACxB,KAAaI,QAASA,EAASC,OAAQA,GAAYkB,GAxBhDD,GAAcG,EAAeH,GAE7BE,gBAACjB,GAAOF,OAAQA,EAAQG,UAAWA,EAAWC,MAAOA,GAClDiB,EAAaJ,EAAY,CAAEjB,OAAAA,EAAQG,UAAAA,EAAWC,MAAAA,KAKrC,WAAZL,EACKoB,gBAACV,GAAMC,gBAAiBV,GAAUG,EAAYC,EAAQ,QAASJ,OAAQA,IAI9EmB,gBAACjB,GAAOF,OAAQA,EAAQG,UAAWA,EAAWC,MAAOA,GAClDD,EACCgB,gBAACd,GAAUL,OAAQA,EAAQI,MAAOA,IAElCe,gBAACG,GAAKlB,MAAOJ,EAAS,QAAUI,OAa1CW,EAASQ,YAAc"}