{"version":3,"file":"Steps.js","sources":["../../../../../src/components/Molecules/Steps/Steps.tsx"],"sourcesContent":["import React, { Children, cloneElement, FC, isValidElement } from 'react'\nimport { Card } from '@/components/Atoms/Card'\nimport { FlexBox } from '@/components/Helper/FlexBox'\nimport { StepConnector } from './StepConnector'\nimport {\n  ElementPosition,\n  StepConnectorProps,\n  StepPrivateProps,\n  StepPublicProps,\n  StepsProps,\n} from './Steps.interface'\n\nexport const Steps: FC<StepsProps> = props => {\n  const {\n    activeStep = 0,\n    completedStep = 0,\n    elevation = 0,\n    connector,\n    children,\n    color = 'primary',\n    variant = 'prominent',\n    onChange,\n    ...other\n  } = props\n\n  const childrenArray = Children.toArray(children)\n\n  const steps = childrenArray.map((step, stepIndex) => {\n    if (isValidElement(step)) {\n      const active = activeStep === stepIndex\n      const completed = stepIndex <= completedStep\n\n      let elementPosition: ElementPosition = 'default'\n\n      if (stepIndex === 0) elementPosition = 'first'\n      if (stepIndex === 1) elementPosition = 'second'\n      if (stepIndex + 1 === Children.count(children)) elementPosition = 'last'\n\n      const connectorProps: StepConnectorProps = {\n        elementPosition,\n        active: stepIndex <= activeStep,\n        prevActive: stepIndex - 1 === activeStep,\n        completed,\n        color,\n        variant,\n      }\n\n      const connectorComponent = isValidElement(connector) ? (\n        cloneElement(connector, { ...connectorProps, ...connector.props })\n      ) : (\n        <StepConnector {...connectorProps} />\n      )\n\n      const stepProps: StepPublicProps & StepPrivateProps = {\n        ...step.props,\n        connector: connectorComponent,\n        elementPosition,\n        stepIndex,\n        active,\n        completed,\n        color,\n        onClick: onChange,\n        variant,\n      }\n\n      return cloneElement(step, stepProps)\n    }\n  })\n\n  return (\n    <Card\n      elevation={elevation}\n      noBorder={['top', 'right', 'bottom', 'left']}\n      surface=\"clear\"\n      padding=\"md\"\n      {...other}>\n      <FlexBox display=\"flex\" alignItems=\"center\" flexDirection=\"row\">\n        {steps}\n      </FlexBox>\n    </Card>\n  )\n}\n\nSteps.displayName = 'Steps'\n"],"names":["Steps","props","activeStep","completedStep","elevation","connector","children","color","variant","onChange","other","steps","Children","toArray","map","step","stepIndex","isValidElement","active","completed","elementPosition","count","connectorProps","prevActive","connectorComponent","cloneElement","React","StepConnector","stepProps","onClick","Card","noBorder","surface","padding","FlexBox","display","alignItems","flexDirection","displayName"],"mappings":"yWAYaA,EAAwB,SAAAC,SAW/BA,EATFC,WAAAA,aAAa,MASXD,EARFE,cAAAA,aAAgB,MAQdF,EAPFG,UAAAA,aAAY,IACZC,EAMEJ,EANFI,UACAC,EAKEL,EALFK,WAKEL,EAJFM,MAAAA,aAAQ,cAINN,EAHFO,QAAAA,aAAU,cACVC,EAEER,EAFFQ,SACGC,IACDT,kGAIEU,EAFgBC,EAASC,QAAQP,GAEXQ,KAAI,SAACC,EAAMC,MACjCC,EAAeF,GAAO,KAClBG,EAAShB,IAAec,EACxBG,EAAYH,GAAab,EAE3BiB,EAAmC,UAErB,IAAdJ,IAAiBI,EAAkB,SACrB,IAAdJ,IAAiBI,EAAkB,UACnCJ,EAAY,IAAMJ,EAASS,MAAMf,KAAWc,EAAkB,YAE5DE,EAAqC,CACzCF,gBAAAA,EACAF,OAAQF,GAAad,EACrBqB,WAAYP,EAAY,IAAMd,EAC9BiB,UAAAA,EACAZ,MAAAA,EACAC,QAAAA,GAGIgB,EAAqBP,EAAeZ,GACxCoB,EAAapB,SAAgBiB,GAAmBjB,EAAUJ,QAE1DyB,gBAACC,EAAkBL,GAGfM,SACDb,EAAKd,WACRI,UAAWmB,EACXJ,gBAAAA,EACAJ,UAAAA,EACAE,OAAAA,EACAC,UAAAA,EACAZ,MAAAA,EACAsB,QAASpB,EACTD,QAAAA,WAGKiB,EAAaV,EAAMa,cAK5BF,gBAACI,KACC1B,UAAWA,EACX2B,SAAU,CAAC,MAAO,QAAS,SAAU,QACrCC,QAAQ,QACRC,QAAQ,MACJvB,GACJgB,gBAACQ,GAAQC,QAAQ,OAAOC,WAAW,SAASC,cAAc,OACvD1B,KAMTX,EAAMsC,YAAc"}