{"version":3,"file":"Carousel.js","sources":["../../../../../src/components/Molecules/Carousel/Carousel.tsx"],"sourcesContent":["import React, { useCallback, useEffect, useState } from 'react'\nimport Slider from 'react-slick'\nimport { Badge } from '@/components/Atoms/Badge'\nimport { Icon, RotationValues } from '@/components/Atoms/Icon'\nimport { IconArrow } from '@/svgs'\nimport { CarouselProps } from './Carousel.interface'\nimport { StyledCarousel, StyledCarouselHandler } from './Carousel.styled'\n\nexport const Carousel: React.FC<CarouselProps> = ({\n  className,\n  sliderSettings,\n  items,\n  renderSlide,\n  hasThumbnails,\n  badges,\n  whiteDots,\n  boxShadow,\n  hasOverflow,\n  hasPadding,\n  fullHeight,\n}): React.ReactElement => {\n  let firstClientX: number | 0\n  let clientX: number | 0\n  let carouselDom: HTMLDivElement | null\n  let slider1\n  let slider2\n  const [nav1, setCountNav1] = useState(slider1)\n  const [nav2, setCountNav2] = useState(slider2)\n  const touchStart = (e: TouchEvent): void => {\n    firstClientX = e.touches[0].clientX\n  }\n  const preventTouch = (e: TouchEvent): boolean => {\n    const minValue = 5 // threshold\n    clientX = e.touches[0].clientX - firstClientX\n\n    // Vertical scrolling does not work when you start swiping horizontally.\n    if (Math.abs(clientX) > minValue) {\n      e.preventDefault()\n      e.returnValue = false\n      return false\n    }\n    return true\n  }\n\n  useEffect(() => {\n    if (carouselDom) {\n      carouselDom.addEventListener('touchstart', touchStart)\n      carouselDom.addEventListener('touchmove', preventTouch, {\n        passive: false,\n      })\n    }\n\n    if (hasThumbnails) {\n      setCountNav1(slider1)\n      setCountNav2(slider2)\n    }\n  }, [])\n\n  const renderArrows = (rotation: RotationValues): React.ReactElement => {\n    if (hasThumbnails) {\n      return (\n        <Icon rotate={rotation} color={'black'} width={24} height={24}>\n          <IconArrow />\n        </Icon>\n      )\n    } else {\n      return (\n        <Icon rotate={rotation} color={'white'} width={24} height={24}>\n          <IconArrow />\n        </Icon>\n      )\n    }\n  }\n\n  const customPaging = () => <div />\n\n  const sliderConfig = (hasThumbnails = false) => {\n    return hasThumbnails\n      ? {\n          asNavFor: nav2,\n          ref: slider => (slider1 = slider),\n          slidesToShow: 1,\n          arrows: false,\n          swipeToSlide: true,\n          focusOnSelect: true,\n          ...sliderSettings,\n        }\n      : {\n          nextArrow: renderArrows(90),\n          prevArrow: renderArrows(270),\n          customPaging,\n          ...sliderSettings,\n        }\n  }\n\n  const sliderThumbnailImageConfig = {\n    ref: slider => (slider2 = slider),\n    slidesToShow: 4,\n    swipeToSlide: true,\n    focusOnSelect: true,\n    asNavFor: nav1,\n    dots: true,\n    className: 'mms-th-slider',\n    ...sliderConfig(false),\n  }\n\n  const [dragging, setDragging] = useState(false)\n\n  const handleBeforeChange = useCallback(() => {\n    setDragging(true)\n  }, [setDragging])\n\n  const handleAfterChange = useCallback(() => {\n    setDragging(false)\n  }, [setDragging])\n\n  const handleOnItemClick = useCallback(\n    e => {\n      if (dragging) {\n        e.stopPropagation()\n      }\n    },\n    [dragging]\n  )\n\n  const beforeChange = (currentSlide, nextSlide) => {\n    if (sliderSettings.beforeChange) sliderSettings.beforeChange(currentSlide, nextSlide)\n    handleBeforeChange()\n  }\n\n  const afterChange = currentSlide => {\n    if (sliderSettings.afterChange) sliderSettings.afterChange(currentSlide)\n    handleAfterChange()\n  }\n\n  return (\n    <StyledCarousel\n      className={className}\n      whiteDots={whiteDots}\n      ref={elem => (carouselDom = elem)}\n      hasThumbnails={hasThumbnails}\n      items={items}\n      sliderSettings={sliderSettings}\n      renderSlide={renderSlide}\n      boxShadow={boxShadow}\n      hasOverflow={hasOverflow}\n      hasPadding={hasPadding}\n      fullHeight={fullHeight}>\n      {badges && badges.length > 0 && <Badge badges={badges} />}\n      <Slider\n        {...sliderConfig(hasThumbnails)}\n        beforeChange={beforeChange}\n        afterChange={afterChange}>\n        {items.map((entry, index) => {\n          return (\n            <StyledCarouselHandler onClickCapture={handleOnItemClick} key={index}>\n              {renderSlide(entry, index, false)}\n            </StyledCarouselHandler>\n          )\n        })}\n      </Slider>\n      {hasThumbnails && (\n        <Slider\n          {...sliderThumbnailImageConfig}\n          beforeChange={beforeChange}\n          afterChange={afterChange}>\n          {items &&\n            items.map((entry, index) => {\n              return (\n                renderSlide && (\n                  <StyledCarouselHandler onClickCapture={handleOnItemClick} key={index}>\n                    {renderSlide(entry, index, true)}\n                  </StyledCarouselHandler>\n                )\n              )\n            })}\n        </Slider>\n      )}\n    </StyledCarousel>\n  )\n}\n\nCarousel.displayName = 'Carousel'\n"],"names":["Carousel","firstClientX","clientX","carouselDom","slider1","slider2","className","sliderSettings","items","renderSlide","hasThumbnails","badges","whiteDots","boxShadow","hasOverflow","hasPadding","fullHeight","useState","nav1","setCountNav1","nav2","setCountNav2","touchStart","e","touches","preventTouch","Math","abs","preventDefault","returnValue","useEffect","addEventListener","passive","renderArrows","rotation","React","Icon","rotate","color","width","height","IconArrow","customPaging","sliderConfig","asNavFor","ref","slider","slidesToShow","arrows","swipeToSlide","focusOnSelect","nextArrow","prevArrow","sliderThumbnailImageConfig","dots","dragging","setDragging","handleBeforeChange","useCallback","handleAfterChange","handleOnItemClick","stopPropagation","beforeChange","currentSlide","nextSlide","afterChange","StyledCarousel","elem","length","Badge","Slider","map","entry","index","StyledCarouselHandler","onClickCapture","key","displayName"],"mappings":"4fAQaA,EAAoC,gBAa3CC,EACAC,EACAC,EACAC,EACAC,EAhBJC,IAAAA,UACAC,IAAAA,eACAC,IAAAA,MACAC,IAAAA,YACAC,IAAAA,cACAC,IAAAA,OACAC,IAAAA,UACAC,IAAAA,UACAC,IAAAA,YACAC,IAAAA,WACAC,IAAAA,aAO6BC,EAASb,YAA/Bc,OAAMC,SACgBF,EAASZ,YAA/Be,OAAMC,OACPC,EAAa,SAACC,GAClBtB,EAAesB,EAAEC,QAAQ,GAAGtB,SAExBuB,EAAe,SAACF,UAEpBrB,EAAUqB,EAAEC,QAAQ,GAAGtB,QAAUD,IAG7ByB,KAAKC,IAAIzB,GAJI,KAKfqB,EAAEK,iBACFL,EAAEM,aAAc,GACT,IAKXC,GAAU,WACJ3B,IACFA,EAAY4B,iBAAiB,aAAcT,GAC3CnB,EAAY4B,iBAAiB,YAAaN,EAAc,CACtDO,SAAS,KAITtB,IACFS,EAAaf,GACbiB,EAAahB,MAEd,QAEG4B,EAAe,SAACC,UAChBxB,EAEAyB,gBAACC,GAAKC,OAAQH,EAAUI,MAAO,QAASC,MAAO,GAAIC,OAAQ,IACzDL,gBAACM,SAKHN,gBAACC,GAAKC,OAAQH,EAAUI,MAAO,QAASC,MAAO,GAAIC,OAAQ,IACzDL,gBAACM,UAMHC,EAAe,kBAAMP,6BAErBQ,EAAe,eAACjC,mEACbA,GAEDkC,SAAUxB,EACVyB,IAAK,SAAAC,UAAW1C,EAAU0C,GAC1BC,aAAc,EACdC,QAAQ,EACRC,cAAc,EACdC,eAAe,IAIfC,UAAWlB,EAAa,IACxBmB,UAAWnB,EAAa,KACxBS,aAAAA,GALGnC,IAUL8C,KACJR,IAAK,SAAAC,UAAWzC,EAAUyC,GAC1BC,aAAc,EACdE,cAAc,EACdC,eAAe,EACfN,SAAU1B,EACVoC,MAAM,EACNhD,UAAW,iBACRqC,GAAa,MAGc1B,GAAS,YAAlCsC,OAAUC,OAEXC,EAAqBC,GAAY,WACrCF,GAAY,KACX,CAACA,IAEEG,EAAoBD,GAAY,WACpCF,GAAY,KACX,CAACA,IAEEI,EAAoBF,GACxB,SAAAnC,GACMgC,GACFhC,EAAEsC,oBAGN,CAACN,IAGGO,EAAe,SAACC,EAAcC,GAC9BzD,EAAeuD,cAAcvD,EAAeuD,aAAaC,EAAcC,GAC3EP,KAGIQ,EAAc,SAAAF,GACdxD,EAAe0D,aAAa1D,EAAe0D,YAAYF,GAC3DJ,YAIAxB,gBAAC+B,GACC5D,UAAWA,EACXM,UAAWA,EACXiC,IAAK,SAAAsB,UAAShE,EAAcgE,GAC5BzD,cAAeA,EACfF,MAAOA,EACPD,eAAgBA,EAChBE,YAAaA,EACbI,UAAWA,EACXC,YAAaA,EACbC,WAAYA,EACZC,WAAYA,GACXL,GAAUA,EAAOyD,OAAS,GAAKjC,gBAACkC,GAAM1D,OAAQA,IAC/CwB,gBAACmC,OACK3B,EAAajC,IACjBoD,aAAcA,EACdG,YAAaA,IACZzD,EAAM+D,KAAI,SAACC,EAAOC,UAEftC,gBAACuC,GAAsBC,eAAgBf,EAAmBgB,IAAKH,GAC5DhE,EAAY+D,EAAOC,GAAO,QAKlC/D,GACCyB,gBAACmC,OACKjB,GACJS,aAAcA,EACdG,YAAaA,IACZzD,GACCA,EAAM+D,KAAI,SAACC,EAAOC,UAEdhE,GACE0B,gBAACuC,GAAsBC,eAAgBf,EAAmBgB,IAAKH,GAC5DhE,EAAY+D,EAAOC,GAAO,UAW/CzE,EAAS6E,YAAc"}