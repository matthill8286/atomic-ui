{"version":3,"file":"AccordionEntry.js","sources":["../../../../../src/components/Molecules/Accordion/AccordionEntry.tsx"],"sourcesContent":["import React from 'react'\nimport { Foldable } from '@/components/Atoms/Foldable'\nimport { FontSizeMap } from '@/components/Atoms/Typography/Typo/Typo.interface'\nimport { IconMinusThin, IconPlusThin } from '@excelwithbusiness/webmobile-svg-library'\nimport { ThemeColors, ThemeFontSizes } from '@/types'\nimport { AccordionEntryProps } from './Accordion.interface'\nimport {\n  StyledAccordionEntry,\n  StyledEntryContent,\n  StyledIcon,\n  StyledLabel,\n  StyledLabelHeading,\n} from './Accordion.styled'\n\nconst toggleEntry = (id: string, onChange: (id: string) => void): void => {\n  onChange(id)\n}\n\nexport const AccordionEntry: React.FC<AccordionEntryProps> = ({\n  title,\n  details,\n  id,\n  onChange,\n  customLabelHeading = {\n    tag: 'div',\n    fontSize: 'sm',\n    bold: 'bold',\n    margin: '0 sm',\n    color: 'grey5',\n  },\n  labelPadding,\n  entryPadding,\n  isOpen = false,\n  looksOpenInitiallyFromBreakpoint,\n  isLarge = false,\n  noBorderTop = false,\n  withIconsOnRight = true,\n  withCustomIcon,\n  customIcon,\n}) => {\n  return (\n    <StyledAccordionEntry\n      id={id}\n      noBorder={noBorderTop}\n      className={isOpen ? 'ewb-accordion-open' : 'ewb-accordion-closed'}>\n      <StyledLabel\n        data-test={'accordion-header'}\n        padding={labelPadding}\n        isLarge={isLarge}\n        withIconsOnRight={withIconsOnRight}\n        onClick={() => toggleEntry(id, onChange)}>\n        <StyledIcon\n          width={isLarge ? 28 : 24}\n          height={isLarge ? 28 : 24}\n          rotate={withCustomIcon && isOpen ? -90 : 90}>\n          {!withCustomIcon ? isOpen ? <IconMinusThin /> : <IconPlusThin /> : customIcon}\n        </StyledIcon>\n        {title && (\n          <StyledLabelHeading\n            tag={customLabelHeading.tag as keyof JSX.IntrinsicElements}\n            fontSize={customLabelHeading.size as ThemeFontSizes | FontSizeMap}\n            color={customLabelHeading.color as ThemeColors}\n            margin={customLabelHeading.margin}\n            isLarge={isLarge}\n            weight={customLabelHeading.bold}\n            withoutIconSpace\n            limitLines={2}>\n            {title}\n          </StyledLabelHeading>\n        )}\n      </StyledLabel>\n      <Foldable isOpen={isOpen} looksOpenInitiallyFromBreakpoint={looksOpenInitiallyFromBreakpoint}>\n        <StyledEntryContent tag=\"div\" isLarge={isLarge} padding={entryPadding}>\n          {details}\n        </StyledEntryContent>\n      </Foldable>\n    </StyledAccordionEntry>\n  )\n}\n"],"names":["AccordionEntry","title","details","id","onChange","customLabelHeading","tag","fontSize","bold","margin","color","labelPadding","entryPadding","isOpen","looksOpenInitiallyFromBreakpoint","isLarge","noBorderTop","withIconsOnRight","withCustomIcon","customIcon","React","StyledAccordionEntry","noBorder","className","StyledLabel","padding","onClick","toggleEntry","StyledIcon","width","height","rotate","IconMinusThin","IconPlusThin","StyledLabelHeading","size","weight","withoutIconSpace","limitLines","Foldable","StyledEntryContent"],"mappings":"4cAcA,IAIaA,EAAgD,gBAC3DC,IAAAA,MACAC,IAAAA,QACAC,IAAAA,GACAC,IAAAA,aACAC,mBAAAA,aAAqB,CACnBC,IAAK,MACLC,SAAU,KACVC,KAAM,OACNC,OAAQ,OACRC,MAAO,WAETC,IAAAA,aACAC,IAAAA,iBACAC,OAAAA,gBACAC,IAAAA,qCACAC,QAAAA,oBACAC,YAAAA,oBACAC,iBAAAA,gBACAC,IAAAA,eACAC,IAAAA,kBAGEC,gBAACC,GACClB,GAAIA,EACJmB,SAAUN,EACVO,UAAWV,EAAS,qBAAuB,wBAC3CO,gBAACI,eACY,mBACXC,QAASd,EACTI,QAASA,EACTE,iBAAkBA,EAClBS,QAAS,kBApCG,SAACvB,EAAYC,GAC/BA,EAASD,GAmCYwB,CAAYxB,EAAIC,KAC/BgB,gBAACQ,GACCC,MAAOd,EAAU,GAAK,GACtBe,OAAQf,EAAU,GAAK,GACvBgB,OAAQb,GAAkBL,GAAU,GAAK,IACvCK,EAAiEC,EAAhDN,EAASO,gBAACY,QAAmBZ,gBAACa,SAElDhC,GACCmB,gBAACc,GACC5B,IAAKD,EAAmBC,IACxBC,SAAUF,EAAmB8B,KAC7BzB,MAAOL,EAAmBK,MAC1BD,OAAQJ,EAAmBI,OAC3BM,QAASA,EACTqB,OAAQ/B,EAAmBG,KAC3B6B,oBACAC,WAAY,GACXrC,IAIPmB,gBAACmB,GAAS1B,OAAQA,EAAQC,iCAAkCA,GAC1DM,gBAACoB,GAAmBlC,IAAI,MAAMS,QAASA,EAASU,QAASb,GACtDV"}