{"version":3,"file":"Accordion.js","sources":["../../../../../src/components/Molecules/Accordion/Accordion.tsx"],"sourcesContent":["import React, { forwardRef, useImperativeHandle } from 'react'\nimport { useContext, useEffect, useReducer } from 'react'\nimport { FoldableAcceptedBreakpoints } from '@/components/Atoms/Foldable/Foldable.interface'\nimport { useWindowDimensions } from '@/components/Helper/useWindowDimensions'\nimport { AccordionEntry } from '@/components/Molecules/Accordion/AccordionEntry'\nimport { ThemeContext } from '@/styles/styled'\nimport {\n  AccordionEntryObject,\n  AccordionProps,\n  AccordionRefObject,\n  ActionType,\n} from './Accordion.interface'\n\nconst openEntriesReducer = (state: string[], action: ActionType): string[] => {\n  switch (action.type) {\n    case 'open':\n      return action.shouldCloseOthers ? [action.id] : state.concat(action.id)\n    case 'close':\n      return state.filter(id => id !== action.id)\n    case 'openBatch':\n      return action.entries.reduce<string[]>(\n        (acc, entry, index) => acc.concat(entry.id || index.toString()),\n        []\n      )\n    case 'checkNewEntries':\n      return state.concat(\n        action.entries\n          .filter(entry => typeof entry.id === 'string' && entry.isOpenInitially)\n          .map(({ id }) => id as string)\n      )\n    default:\n      return state\n  }\n}\n\nconst getInitialState = ([openedIndex, isUnfoldable, entries]: [\n  number,\n  boolean,\n  AccordionEntryObject[]\n]): string[] => {\n  // We can have more than one entry open\n  if (isUnfoldable) {\n    return entries.reduce<string[]>(\n      (acc, entry, index) =>\n        entry.isOpenInitially || openedIndex === index\n          ? acc.concat(entry.id || index.toString())\n          : acc,\n      []\n    )\n  }\n\n  // We can only have one entry open\n  // If there are more than one entries with isOpenInitially, use the first one.\n  const openEntry = entries.find(entry => !!entry.isOpenInitially)\n  if (openEntry) {\n    return [openEntry.id || entries.indexOf(openEntry).toString()]\n  }\n  // Initially open entry can also be set by list index.\n  if (openedIndex > -1 && openedIndex < entries.length) {\n    return [entries[openedIndex].id || openedIndex.toString()]\n  }\n\n  // Otherwise all entries are closed.\n  return []\n}\n\nexport const Accordion = forwardRef<AccordionRefObject, AccordionProps>(\n  (\n    {\n      entries,\n      isUnfoldable = false,\n      openedIndex = -1,\n      onChange,\n      isExpandedFrom,\n      isLarge,\n      customLabelHeading,\n      withIconsOnRight = false,\n      labelPadding,\n      entryPadding,\n      withCustomIcon = false,\n      customIcon,\n      ...otherProps\n    },\n    ref\n  ): JSX.Element | null => {\n    const [idsOfOpenEntries, dispatch] = useReducer(\n      openEntriesReducer,\n      [openedIndex, isUnfoldable, entries],\n      getInitialState\n    )\n\n    useEffect(() => {\n      if (openedIndex > -1 && !idsOfOpenEntries.includes(`${openedIndex}`)) {\n        dispatch({ type: 'open', id: `${openedIndex}`, shouldCloseOthers: !isUnfoldable })\n      }\n    }, [openedIndex])\n\n    const knownEntryIds = React.useRef(entries.map(({ id }) => id))\n\n    const entriesNotYetInitialized = entries.filter(\n      entry => !knownEntryIds.current.includes(entry.id)\n    )\n\n    knownEntryIds.current = [...entries.map(({ id }) => id)]\n\n    if (entriesNotYetInitialized.length > 0) {\n      dispatch({ type: 'checkNewEntries', entries: entriesNotYetInitialized })\n    }\n\n    const { breakpoint: currentBreakpoint } = useWindowDimensions()\n    const theme = useContext(ThemeContext)\n    const isExpandedFromBreakpoint = isExpandedFrom ? theme.breakpoints[isExpandedFrom] : undefined\n\n    const _onChange = (id: string): void => {\n      const isOpen = idsOfOpenEntries.includes(id)\n      if (isOpen) {\n        dispatch({\n          type: 'close',\n          id,\n        })\n      } else {\n        dispatch({\n          type: 'open',\n          id,\n          shouldCloseOthers: !isUnfoldable,\n        })\n      }\n\n      if (onChange) {\n        onChange({\n          index: entries.findIndex(entry => entry.id === id) || +id,\n          eventType: isOpen ? 'HIDE' : 'SHOW',\n        })\n      }\n    }\n\n    useEffect(() => {\n      if (currentBreakpoint >= isExpandedFromBreakpoint) {\n        dispatch({\n          type: 'openBatch',\n          entries,\n        })\n      }\n    }, [])\n\n    useImperativeHandle(ref, () => ({\n      openEntryById: (id: string) => {\n        const isOpen = idsOfOpenEntries.includes(id)\n        if (!isOpen) {\n          _onChange(id)\n        }\n      },\n    }))\n\n    return entries ? (\n      <section {...otherProps}>\n        {entries.map((entry: AccordionEntryObject, index: number) => {\n          const id = entry.id || index.toString()\n          const isOpen = idsOfOpenEntries.includes(id)\n\n          return (\n            <AccordionEntry\n              isLarge={isLarge}\n              entryPadding={entryPadding}\n              details={entry.details}\n              id={id}\n              isOpen={isOpen}\n              key={id}\n              looksOpenInitiallyFromBreakpoint={\n                isExpandedFromBreakpoint as FoldableAcceptedBreakpoints\n              }\n              onChange={_onChange}\n              labelPadding={labelPadding}\n              title={entry.title}\n              customLabelHeading={customLabelHeading}\n              noBorderTop={entry.noBorderTop}\n              withIconsOnRight={withIconsOnRight}\n              withCustomIcon={withCustomIcon}\n              customIcon={customIcon}\n            />\n          )\n        })}\n      </section>\n    ) : null\n  }\n)\n"],"names":["openEntriesReducer","state","action","type","shouldCloseOthers","id","concat","filter","entries","reduce","acc","entry","index","toString","isOpenInitially","map","getInitialState","openedIndex","isUnfoldable","openEntry","find","indexOf","length","Accordion","forwardRef","ref","onChange","isExpandedFrom","isLarge","customLabelHeading","withIconsOnRight","labelPadding","entryPadding","withCustomIcon","customIcon","otherProps","useReducer","idsOfOpenEntries","dispatch","useEffect","includes","knownEntryIds","React","useRef","entriesNotYetInitialized","current","currentBreakpoint","useWindowDimensions","breakpoint","theme","useContext","ThemeContext","isExpandedFromBreakpoint","breakpoints","undefined","_onChange","isOpen","findIndex","eventType","useImperativeHandle","openEntryById","AccordionEntry","details","key","looksOpenInitiallyFromBreakpoint","title","noBorderTop"],"mappings":"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"}