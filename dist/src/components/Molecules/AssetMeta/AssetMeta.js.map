{"version":3,"file":"AssetMeta.js","sources":["../../../../../src/components/Molecules/AssetMeta/AssetMeta.tsx"],"sourcesContent":["import React from 'react'\nimport { IconButton } from '@/components/Atoms/Button'\nimport { Card } from '@/components/Atoms/Card'\nimport { Icon } from '@/components/Atoms/Icon'\nimport { Tag } from '@/components/Atoms/Tag'\nimport { TagProps } from '@/components/Atoms/Tag/Tag.interface'\nimport { FlexBox, FlexItem } from '@/components/Helper/FlexBox'\nimport { FeatureList, FeatureListType } from '@/components/Molecules/FeatureList'\nimport {\n  IconBookmark,\n  IconBookmarkActive,\n  IconCheckmarkCircle,\n  IconCheckmarkCircleOutlined,\n  StyleguideExpand,\n  IconSaveToPlaylist,\n  IconShare,\n} from '@excelwithbusiness/webmobile-svg-library'\nimport { CompetencyText, CompleteButton, IconsWrapper, LaunchButton } from './AssetMeta.styled'\nimport { isNonEmptyString } from '@/components/Helper/String'\nimport { EmbeddedWrapper } from '@/components/Atoms/EmbeddedPlayer'\n\nexport interface AssetMetaProps {\n  isShareInteraction?: boolean\n  isBookmarkInteraction?: boolean\n  isCreatePlaylistInteraction?: boolean\n  isLandingPage?: boolean\n  bookmarked?: boolean\n  completed?: boolean\n  saved?: boolean\n  shared?: boolean\n  shareHandler?: () => void\n  bookmarkHandler?: () => void\n  savePlaylistHandler?: () => void\n  launchHandler?: () => void\n  hideLaunched?: boolean\n  completedHandler?: () => void\n  trackingHandler?: () => void\n  buttonTextLaunch?: string\n  buttonTextComplete?: string\n  list: FeatureListType[]\n  competencyCopy: string\n  tags: TagProps[]\n  chatSrc?: string\n  chatMaxHeight?: string | number\n}\n\nexport const AssetMeta: React.FC<AssetMetaProps> = ({\n  isShareInteraction = false,\n  isBookmarkInteraction = false,\n  isCreatePlaylistInteraction = false,\n  isLandingPage = false,\n  hideLaunched = false,\n  bookmarked,\n  completed,\n  shareHandler,\n  bookmarkHandler,\n  savePlaylistHandler,\n  launchHandler,\n  completedHandler,\n  buttonTextLaunch,\n  buttonTextComplete,\n  list,\n  competencyCopy,\n  tags = [],\n  chatSrc = '',\n  chatMaxHeight,\n}): JSX.Element => {\n  return (\n    <FlexBox flexDirection=\"column\" alignItems=\"center\">\n      <IconsWrapper>\n        {isBookmarkInteraction && (\n          <FlexItem padding>\n            <IconButton\n              round\n              size=\"md\"\n              weight=\"bold\"\n              onClick={bookmarkHandler}\n              actionType=\"darkBorder\"\n              height={45}\n              width={45}>\n              {bookmarked ? <IconBookmarkActive /> : <IconBookmark />}\n            </IconButton>\n          </FlexItem>\n        )}\n        {isShareInteraction && (\n          <FlexItem padding>\n            <IconButton\n              round\n              size=\"md\"\n              weight=\"bold\"\n              onClick={shareHandler}\n              actionType=\"darkBorder\"\n              height={45}\n              width={45}>\n              <IconShare />\n            </IconButton>\n          </FlexItem>\n        )}\n        {isCreatePlaylistInteraction && (\n          <FlexItem padding>\n            <IconButton\n              round\n              size=\"md\"\n              weight=\"bold\"\n              onClick={savePlaylistHandler}\n              actionType=\"darkBorder\"\n              height={45}\n              width={45}>\n              <IconSaveToPlaylist />\n            </IconButton>\n          </FlexItem>\n        )}\n      </IconsWrapper>\n      {isNonEmptyString(chatSrc) ? (\n        <EmbeddedWrapper embedUrl={chatSrc} aspect=\"1/4\" maxHeight={chatMaxHeight} />\n      ) : (\n        <Card elevation={1} shape=\"rounded-small\" padding=\"lg\">\n          {!hideLaunched && (\n            <LaunchButton weight=\"bold\" curved fullWidth onClick={launchHandler}>\n              <Icon width={20} height={20} color=\"white\">\n                <StyleguideExpand fill={'white'} />\n              </Icon>\n              {buttonTextLaunch}\n            </LaunchButton>\n          )}\n          {!isLandingPage && (\n            <CompleteButton\n              color=\"primary\"\n              weight=\"bold\"\n              curved\n              actionType=\"outlined\"\n              fullWidth\n              onClick={completedHandler}>\n              <Icon width={25} height={25} color=\"primary\">\n                {completed ? <IconCheckmarkCircle /> : <IconCheckmarkCircleOutlined />}\n              </Icon>\n              {buttonTextComplete}\n            </CompleteButton>\n          )}\n          {list && <FeatureList list={list} />}\n          <CompetencyText padding=\"sm 0\">{competencyCopy}</CompetencyText>\n          <FlexBox flexWrap=\"wrap\">\n            {tags.map(({ text }: { text: TagProps['text'] }, idx: number) => (\n              <FlexItem key={`Tag-${idx}`}>\n                {text && (\n                  <Tag\n                    color=\"primary\"\n                    marginBottom\n                    marginRight\n                    padding={{ left: 'lg', right: 'lg' }}\n                    text={text}\n                    weight=\"semibold\"\n                  />\n                )}\n              </FlexItem>\n            ))}\n          </FlexBox>\n        </Card>\n      )}\n    </FlexBox>\n  )\n}\n\nAssetMeta.displayName = 'AssetMeta'\n"],"names":["AssetMeta","isShareInteraction","isBookmarkInteraction","isCreatePlaylistInteraction","isLandingPage","hideLaunched","bookmarked","completed","shareHandler","bookmarkHandler","savePlaylistHandler","launchHandler","completedHandler","buttonTextLaunch","buttonTextComplete","list","competencyCopy","tags","chatSrc","chatMaxHeight","React","FlexBox","flexDirection","alignItems","IconsWrapper","FlexItem","padding","IconButton","round","size","weight","onClick","actionType","height","width","IconBookmarkActive","IconBookmark","IconShare","IconSaveToPlaylist","isNonEmptyString","EmbeddedWrapper","embedUrl","aspect","maxHeight","Card","elevation","shape","LaunchButton","curved","fullWidth","Icon","color","StyleguideExpand","fill","CompleteButton","IconCheckmarkCircle","IconCheckmarkCircleOutlined","FeatureList","CompetencyText","flexWrap","map","idx","text","key","Tag","marginBottom","marginRight","left","right","displayName"],"mappings":"48CA8CaA,EAAsC,oBACjDC,mBAAAA,oBACAC,sBAAAA,oBACAC,4BAAAA,oBACAC,cAAAA,oBACAC,aAAAA,gBACAC,IAAAA,WACAC,IAAAA,UACAC,IAAAA,aACAC,IAAAA,gBACAC,IAAAA,oBACAC,IAAAA,cACAC,IAAAA,iBACAC,IAAAA,iBACAC,IAAAA,mBACAC,IAAAA,KACAC,IAAAA,mBACAC,KAAAA,aAAO,SACPC,QAAAA,aAAU,KACVC,IAAAA,qBAGEC,gBAACC,GAAQC,cAAc,SAASC,WAAW,UACzCH,gBAACI,OACEtB,GACCkB,gBAACK,GAASC,YACRN,gBAACO,GACCC,SACAC,KAAK,KACLC,OAAO,OACPC,QAAStB,EACTuB,WAAW,aACXC,OAAQ,GACRC,MAAO,IACN5B,EAAac,gBAACe,QAAwBf,gBAACgB,UAI7CnC,GACCmB,gBAACK,GAASC,YACRN,gBAACO,GACCC,SACAC,KAAK,KACLC,OAAO,OACPC,QAASvB,EACTwB,WAAW,aACXC,OAAQ,GACRC,MAAO,IACPd,gBAACiB,UAINlC,GACCiB,gBAACK,GAASC,YACRN,gBAACO,GACCC,SACAC,KAAK,KACLC,OAAO,OACPC,QAASrB,EACTsB,WAAW,aACXC,OAAQ,GACRC,MAAO,IACPd,gBAACkB,WAKRC,EAAiBrB,GAChBE,gBAACoB,GAAgBC,SAAUvB,EAASwB,OAAO,MAAMC,UAAWxB,IAE5DC,gBAACwB,GAAKC,UAAW,EAAGC,MAAM,gBAAgBpB,QAAQ,OAC9CrB,GACAe,gBAAC2B,GAAajB,OAAO,OAAOkB,UAAOC,aAAUlB,QAASpB,GACpDS,gBAAC8B,GAAKhB,MAAO,GAAID,OAAQ,GAAIkB,MAAM,SACjC/B,gBAACgC,GAAiBC,KAAM,WAEzBxC,IAGHT,GACAgB,gBAACkC,GACCH,MAAM,UACNrB,OAAO,OACPkB,UACAhB,WAAW,WACXiB,aACAlB,QAASnB,GACTQ,gBAAC8B,GAAKhB,MAAO,GAAID,OAAQ,GAAIkB,MAAM,WAChC5C,EAAYa,gBAACmC,QAAyBnC,gBAACoC,SAEzC1C,GAGJC,GAAQK,gBAACqC,GAAY1C,KAAMA,IAC5BK,gBAACsC,GAAehC,QAAQ,QAAQV,GAChCI,gBAACC,GAAQsC,SAAS,QACf1C,EAAK2C,KAAI,WAAuCC,OAApCC,IAAAA,YACX1C,gBAACK,GAASsC,kBAAYF,IACnBC,GACC1C,gBAAC4C,GACCb,MAAM,UACNc,gBACAC,eACAxC,QAAS,CAAEyC,KAAM,KAAMC,MAAO,MAC9BN,KAAMA,EACNhC,OAAO,qBAY3B9B,EAAUqE,YAAc"}