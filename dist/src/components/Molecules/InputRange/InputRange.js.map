{"version":3,"file":"InputRange.js","sources":["../../../../../src/components/Molecules/InputRange/InputRange.tsx"],"sourcesContent":["import React, { useState } from 'react'\nimport {\n  StyledInputRange,\n  StyledInputRangeBubble,\n  StyledInputRangeBubbleContainer,\n  StyledInputRangeBubblePosition,\n  StyledInputRangeBubbleTypo,\n  StyledInputRangeContainer,\n  StyledInputRangeMarkLine,\n  StyledInputRangeMarks,\n  StyledInputRangeMarkTypo,\n  StyledInputRangeThumb,\n} from './InputRange.styled'\n\nexport type InputRangeProps = Pick<\n  JSX.IntrinsicElements['input'],\n  'name' | 'step' | 'min' | 'max' | 'value'\n> & {\n  markAmount?: number\n  allowMoreThanMax?: boolean\n  withBubble?: boolean\n  showMarks?: boolean\n  onChange?: React.ChangeEventHandler<HTMLInputElement>\n}\n\nexport const InputRange: React.FC<InputRangeProps> = props => {\n  const {\n    name = 'input-range',\n    step = '0.1',\n    markAmount = 0,\n    min = '0',\n    max = '1',\n    value = '1',\n    allowMoreThanMax = false,\n    withBubble = true,\n    showMarks = false,\n    onChange,\n  } = props\n\n  const [isSliding, setIsSliding] = useState(false)\n  const percentage = ((+value - +min) * 100) / (+max - +min)\n\n  const onChangeHandler = (ev: React.ChangeEvent<HTMLInputElement>) => {\n    if (onChange) {\n      onChange(ev)\n    }\n  }\n\n  const calcIntervalLabel = (interval: number): number =>\n    Math.round(interval * ((+max - +min) / markAmount) + +min)\n\n  return (\n    <StyledInputRangeContainer>\n      {withBubble && (\n        <StyledInputRangeBubbleContainer>\n          <StyledInputRangeBubblePosition style={{ left: `${percentage}%` }}>\n            <StyledInputRangeBubble isSliding={isSliding}>\n              <StyledInputRangeBubbleTypo\n                color=\"primary\"\n                fontFamily=\"default\"\n                limitLines={1}\n                tag=\"span\"\n                weight=\"regular\">\n                {Math.round(parseFloat(value as string) * 10)}\n              </StyledInputRangeBubbleTypo>\n            </StyledInputRangeBubble>\n          </StyledInputRangeBubblePosition>\n        </StyledInputRangeBubbleContainer>\n      )}\n      <StyledInputRangeThumb style={{ left: `${percentage}%` }} />\n      <StyledInputRange\n        type=\"range\"\n        name={name}\n        list={name}\n        step={step}\n        min={min}\n        max={max}\n        value={value}\n        onMouseDown={() => setIsSliding(true)}\n        onTouchStart={() => setIsSliding(true)}\n        onMouseUp={() => setIsSliding(false)}\n        onTouchEnd={() => setIsSliding(false)}\n        onChange={onChangeHandler}\n      />\n      {showMarks && markAmount > 0 && (\n        <StyledInputRangeMarks>\n          {Array.from({ length: markAmount + 1 }, (_, interval) => (\n            <StyledInputRangeMarkLine\n              key={interval}\n              index={interval}\n              markAmount={markAmount}\n              left={((calcIntervalLabel(interval) - +min) * 100) / (+max - +min)}>\n              <StyledInputRangeMarkTypo weight=\"semibold\" fontSize=\"lg\" limitLines={1}>\n                {calcIntervalLabel(interval)} {allowMoreThanMax && interval === markAmount && '+'}\n              </StyledInputRangeMarkTypo>\n            </StyledInputRangeMarkLine>\n          ))}\n        </StyledInputRangeMarks>\n      )}\n    </StyledInputRangeContainer>\n  )\n}\n"],"names":["InputRange","props","name","step","markAmount","min","max","value","allowMoreThanMax","withBubble","showMarks","onChange","useState","isSliding","setIsSliding","percentage","calcIntervalLabel","interval","Math","round","React","StyledInputRangeContainer","StyledInputRangeBubbleContainer","StyledInputRangeBubblePosition","style","left","StyledInputRangeBubble","StyledInputRangeBubbleTypo","color","fontFamily","limitLines","tag","weight","parseFloat","StyledInputRangeThumb","StyledInputRange","type","list","onMouseDown","onTouchStart","onMouseUp","onTouchEnd","ev","StyledInputRangeMarks","Array","from","length","_","StyledInputRangeMarkLine","key","index","StyledInputRangeMarkTypo","fontSize"],"mappings":"0cAyBaA,EAAwC,SAAAC,SAY/CA,EAVFC,KAAAA,aAAO,kBAULD,EATFE,KAAAA,aAAO,UASLF,EARFG,WAAAA,aAAa,MAQXH,EAPFI,IAAAA,aAAM,QAOJJ,EANFK,IAAAA,aAAM,QAMJL,EALFM,MAAAA,aAAQ,QAKNN,EAJFO,iBAAAA,kBAIEP,EAHFQ,WAAAA,kBAGER,EAFFS,UAAAA,gBACAC,EACEV,EADFU,WAGgCC,GAAS,YAApCC,OAAWC,OACZC,EAAgC,MAAhBR,GAASF,KAAgBC,GAAOD,GAQhDW,EAAoB,SAACC,UACzBC,KAAKC,MAAMF,KAAcX,GAAOD,GAAOD,KAAeC,WAGtDe,gBAACC,OACEZ,GACCW,gBAACE,OACCF,gBAACG,GAA+BC,MAAO,CAAEC,eAASV,SAChDK,gBAACM,GAAuBb,UAAWA,GACjCO,gBAACO,GACCC,MAAM,UACNC,WAAW,UACXC,WAAY,EACZC,IAAI,OACJC,OAAO,WACNd,KAAKC,MAAoC,GAA9Bc,WAAW1B,QAMjCa,gBAACc,GAAsBV,MAAO,CAAEC,eAASV,UACzCK,gBAACe,GACCC,KAAK,QACLlC,KAAMA,EACNmC,KAAMnC,EACNC,KAAMA,EACNE,IAAKA,EACLC,IAAKA,EACLC,MAAOA,EACP+B,YAAa,kBAAMxB,GAAa,IAChCyB,aAAc,kBAAMzB,GAAa,IACjC0B,UAAW,kBAAM1B,GAAa,IAC9B2B,WAAY,kBAAM3B,GAAa,IAC/BH,SAxCkB,SAAC+B,GACnB/B,GACFA,EAAS+B,MAwCRhC,GAAaN,EAAa,GACzBgB,gBAACuB,OACEC,MAAMC,KAAK,CAAEC,OAAQ1C,EAAa,IAAK,SAAC2C,EAAG9B,UAC1CG,gBAAC4B,GACCC,IAAKhC,EACLiC,MAAOjC,EACPb,WAAYA,EACZqB,KAA8C,KAAtCT,EAAkBC,IAAaZ,KAAgBC,GAAOD,IAC9De,gBAAC+B,GAAyBnB,OAAO,WAAWoB,SAAS,KAAKtB,WAAY,GACnEd,EAAkBC,OAAYT,GAAoBS,IAAab,GAAc"}