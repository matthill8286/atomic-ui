{"version":3,"file":"NotificationBox.js","sources":["../../../../../src/components/Molecules/NotificationBox/NotificationBox.tsx"],"sourcesContent":["import React from 'react'\nimport { Card } from '@/components/Atoms/Card'\nimport { Icon } from '@/components/Atoms/Icon'\nimport { Link } from '@/components/Atoms/Link'\nimport { CopyText } from '@/components/Atoms/Typography/CopyText'\nimport {\n  IconArrow,\n  IconCheckmarkCircleOutlined,\n  IconClear,\n  IconClearCircleOutlined,\n  IconInfoOutlined,\n} from '@excelwithbusiness/webmobile-svg-library'\nimport { Padding } from '@/types/theme'\nimport {\n  NotificationBoxProps,\n  NotificationContentSort,\n  NotificationLink,\n} from './NotificationBox.interface'\nimport {\n  StyledArrow,\n  StyledBodyHtml,\n  StyledButton,\n  StyledButtonDiv,\n  StyledCopyTextDiv,\n  StyledLinkDiv,\n  StyledNotificationBoxWrapper,\n  StyledNotificationClose,\n  StyledNotificationHeadline,\n} from './NotificationBoxStyled'\n\nexport const NotificationBox = React.forwardRef<HTMLDivElement, NotificationBoxProps>(\n  (\n    {\n      body,\n      bodyFontSize = 'sm',\n      bodyMargin,\n      buttonLayout = 'column',\n      buttons,\n      cardShape = 'rounded-small',\n      hasTitleIcon,\n      isTitleFontBold = true,\n      titleIconSelfAlign,\n      isClosable,\n      rootPosition,\n      maxWidth,\n      links,\n      onClose,\n      title,\n      tooltip,\n      type,\n      sort = NotificationContentSort.LinksButtons,\n      alignLinks = 'left',\n      ...otherProps\n    },\n    ref\n  ) => {\n    const renderIcon = (type): React.ReactElement => {\n      switch (type) {\n        case 'info':\n          return <IconInfoOutlined />\n        case 'success':\n          return <IconCheckmarkCircleOutlined />\n        case 'alert':\n          return <IconInfoOutlined />\n        case 'error':\n          return <IconClearCircleOutlined />\n        default:\n          return <IconInfoOutlined />\n      }\n    }\n\n    // Originally \"iconLeft\" was not settable\n    // Thus to ensure backwards compatibility and also allow to set no \"iconLeft\" to be rendered,\n    // null will return undefined and undefined will return a default element.\n    const getIconLeft = (iconLeft?: React.ReactElement | null): React.ReactElement | undefined => {\n      if (iconLeft === null) return undefined\n      if (iconLeft === undefined)\n        return (\n          <Icon color=\"grey6\">\n            <IconArrow />\n          </Icon>\n        )\n      return iconLeft\n    }\n\n    const renderLinks = () =>\n      Boolean(links?.length) && (\n        <StyledLinkDiv alignLinks={alignLinks}>\n          {/* TypeScript cannot infer that 'links' cannot be 'undefined' at this point (yet) */}\n          {(links as NotificationLink[]).map(({ label, iconLeft, ...linkProps }) => (\n            <Link\n              iconLeft={getIconLeft(iconLeft)}\n              color=\"grey4\"\n              decorationColor=\"grey4\"\n              key={label}\n              scale=\"large\"\n              {...linkProps}>\n              {label}\n            </Link>\n          ))}\n        </StyledLinkDiv>\n      )\n\n    const arrowPos = tooltip?.arrowPosition.split('-')\n    const padding = tooltip ? ({ mobile: 'sm', tablet: 'md', top: 'md' } as Padding) : 'md'\n\n    return (\n      <StyledNotificationBoxWrapper\n        data-test=\"notification-box\"\n        tooltip={tooltip}\n        type={type}\n        rootPosition={rootPosition}\n        maxWidth={maxWidth}\n        ref={ref}\n        {...otherProps}>\n        <StyledNotificationClose onClick={onClose}>\n          <Icon width={16} height={16} color={'grey6'}>\n            {isClosable && <IconClear />}\n          </Icon>\n        </StyledNotificationClose>\n        {arrowPos && <StyledArrow arrowLeft={tooltip?.arrowleft} arrowPosition={arrowPos} />}\n        <Card elevation={1} padding={padding} shape={cardShape} surface=\"white\">\n          {title && (\n            <StyledNotificationHeadline>\n              {hasTitleIcon && (\n                <Icon width={16} height={16} color=\"grey6\" alignSelf={titleIconSelfAlign}>\n                  {renderIcon(type)}\n                </Icon>\n              )}\n              <CopyText\n                data-test=\"notification-box-title\"\n                color=\"grey6\"\n                display=\"flex\"\n                tag=\"div\"\n                bold={isTitleFontBold}>\n                {title}\n              </CopyText>\n            </StyledNotificationHeadline>\n          )}\n          {body && (\n            <StyledCopyTextDiv margin={bodyMargin}>\n              <CopyText\n                data-test=\"notification-box-body\"\n                fontSize={bodyFontSize}\n                margin={bodyMargin}>\n                {\n                  <StyledBodyHtml\n                    dangerouslySetInnerHTML={{\n                      __html: body,\n                    }}\n                  />\n                }\n              </CopyText>\n            </StyledCopyTextDiv>\n          )}\n\n          {sort === NotificationContentSort.LinksButtons && renderLinks()}\n\n          {buttons && buttons.length > 0 && (\n            <StyledButtonDiv buttonLayout={buttonLayout}>\n              {buttons.map(({ actionBtnLabel, actionType = 'inverted', ...buttonProps }) => (\n                <StyledButton\n                  actionType={actionType}\n                  fullWidth\n                  key={actionBtnLabel}\n                  size=\"sm\"\n                  {...buttonProps}>\n                  {actionBtnLabel}\n                </StyledButton>\n              ))}\n            </StyledButtonDiv>\n          )}\n          {sort === NotificationContentSort.ButtonsLinks && renderLinks()}\n        </Card>\n      </StyledNotificationBoxWrapper>\n    )\n  }\n)\n"],"names":["NotificationBox","React","forwardRef","ref","body","bodyFontSize","bodyMargin","buttonLayout","buttons","cardShape","hasTitleIcon","isTitleFontBold","titleIconSelfAlign","isClosable","rootPosition","maxWidth","links","onClose","title","tooltip","type","sort","NotificationContentSort","LinksButtons","alignLinks","otherProps","getIconLeft","iconLeft","undefined","Icon","color","IconArrow","renderLinks","Boolean","length","StyledLinkDiv","map","label","linkProps","Link","decorationColor","key","scale","arrowPos","arrowPosition","split","padding","mobile","tablet","top","StyledNotificationBoxWrapper","StyledNotificationClose","onClick","width","height","IconClear","StyledArrow","arrowLeft","arrowleft","Card","elevation","shape","surface","StyledNotificationHeadline","alignSelf","IconInfoOutlined","IconCheckmarkCircleOutlined","IconClearCircleOutlined","renderIcon","CopyText","display","tag","bold","StyledCopyTextDiv","margin","fontSize","StyledBodyHtml","dangerouslySetInnerHTML","__html","StyledButtonDiv","actionBtnLabel","actionType","buttonProps","StyledButton","fullWidth","size","ButtonsLinks"],"mappings":"uwCA8BaA,EAAkBC,EAAMC,YACnC,WAuBEC,OArBEC,IAAAA,SACAC,aAAAA,aAAe,OACfC,IAAAA,eACAC,aAAAA,aAAe,WACfC,IAAAA,YACAC,UAAAA,aAAY,kBACZC,IAAAA,iBACAC,gBAAAA,gBACAC,IAAAA,mBACAC,IAAAA,WACAC,IAAAA,aACAC,IAAAA,SACAC,IAAAA,MACAC,IAAAA,QACAC,IAAAA,MACAC,IAAAA,QACAC,IAAAA,SACAC,KAAAA,aAAOC,EAAwBC,mBAC/BC,WAAAA,aAAa,SACVC,6OAsBCC,EAAc,SAACC,MACF,OAAbA,cACaC,IAAbD,EAEA1B,gBAAC4B,GAAKC,MAAM,SACV7B,gBAAC8B,SAGAJ,GAGHK,EAAc,kBAClBC,QAAQjB,MAAAA,SAAAA,EAAOkB,SACbjC,gBAACkC,GAAcX,WAAYA,GAEvBR,EAA6BoB,KAAI,gBAAGC,IAAAA,MAAOV,IAAAA,SAAaW,mCACxDrC,gBAACsC,KACCZ,SAAUD,EAAYC,GACtBG,MAAM,QACNU,gBAAgB,QAChBC,IAAKJ,EACLK,MAAM,SACFJ,GACHD,QAMLM,EAAWxB,MAAAA,SAAAA,EAASyB,cAAcC,MAAM,KACxCC,EAAU3B,EAAW,CAAE4B,OAAQ,KAAMC,OAAQ,KAAMC,IAAK,MAAqB,YAGjFhD,gBAACiD,iBACW,mBACV/B,QAASA,EACTC,KAAMA,EACNN,aAAcA,EACdC,SAAUA,EACVZ,IAAKA,GACDsB,GACJxB,gBAACkD,GAAwBC,QAASnC,GAChChB,gBAAC4B,GAAKwB,MAAO,GAAIC,OAAQ,GAAIxB,MAAO,SACjCjB,GAAcZ,gBAACsD,UAGnBZ,GAAY1C,gBAACuD,GAAYC,UAAWtC,MAAAA,SAAAA,EAASuC,UAAWd,cAAeD,IACxE1C,gBAAC0D,GAAKC,UAAW,EAAGd,QAASA,EAASe,MAAOpD,EAAWqD,QAAQ,SAC7D5C,GACCjB,gBAAC8D,OACErD,GACCT,gBAAC4B,GAAKwB,MAAO,GAAIC,OAAQ,GAAIxB,MAAM,QAAQkC,UAAWpD,GArE/C,SAACQ,UACVA,kBAUGnB,gBAACgE,YAPL,iBACIhE,gBAACiE,YAGL,eACIjE,gBAACkE,SA6DCC,CAAWhD,IAGhBnB,gBAACoE,eACW,yBACVvC,MAAM,QACNwC,QAAQ,OACRC,IAAI,MACJC,KAAM7D,GACLO,IAINd,GACCH,gBAACwE,GAAkBC,OAAQpE,GACzBL,gBAACoE,eACW,wBACVM,SAAUtE,EACVqE,OAAQpE,GAENL,gBAAC2E,GACCC,wBAAyB,CACvBC,OAAQ1E,OAQnBiB,IAASC,EAAwBC,cAAgBS,IAEjDxB,GAAWA,EAAQ0B,OAAS,GAC3BjC,gBAAC8E,GAAgBxE,aAAcA,GAC5BC,EAAQ4B,KAAI,gBAAG4C,IAAAA,mBAAgBC,WAAAA,aAAa,aAAeC,8CAC1DjF,gBAACkF,KACCF,WAAYA,EACZG,aACA3C,IAAKuC,EACLK,KAAK,MACDH,GACHF,OAKR3D,IAASC,EAAwBgE,cAAgBtD"}