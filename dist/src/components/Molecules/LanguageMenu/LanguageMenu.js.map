{"version":3,"file":"LanguageMenu.js","sources":["../../../../../src/components/Molecules/LanguageMenu/LanguageMenu.tsx"],"sourcesContent":["import React, { FC, useEffect, useRef, useState } from 'react'\nimport { useDropdownState } from '@/components/Helper/useDropdownState'\nimport {\n  StyledContainer,\n  StyledDropdown,\n} from '@/components/Molecules/DropdownButton/DropdownButton'\nimport { LanguageButton } from './LanguageButton'\nimport { LanguageMenuList } from './LanguageMenuList'\nimport { StyleguideGlobeThin } from '@/svgs'\n\nexport type LanguageMenuOption = {\n  label: string\n  id: number\n  url?: string\n  to?: string\n}\n\nexport interface LanguageMenuProps {\n  className?: string\n  languages: LanguageMenuOption[]\n  testIdSuffix?: string\n  extendedLanguageHandler: (item: LanguageMenuOption) => void\n  setupCurrentIndex?: number\n  isMobile?: boolean\n}\n\nexport const LanguageMenu: FC<LanguageMenuProps> = ({\n  className,\n  languages = [],\n  testIdSuffix,\n  extendedLanguageHandler,\n  setupCurrentIndex = -1,\n  isMobile = false,\n}) => {\n  const { element, toggleDropdown, showDropdown } = useDropdownState<HTMLDivElement>()\n  const [currentIndex, setCurrentIndex] = useState<number>(setupCurrentIndex)\n  const ref = useRef<HTMLElement>(null)\n\n  const onToggleDropdown = () => {\n    toggleDropdown()\n  }\n\n  const handleLanguageClick = (index, item) => {\n    if (showDropdown) {\n      toggleDropdown()\n    }\n\n    setCurrentIndex(index)\n\n    if (extendedLanguageHandler) {\n      extendedLanguageHandler(item)\n    }\n  }\n\n  const handleClickOutside = (event: Event): void => {\n    if (!ref.current?.contains(event.target as Node) && showDropdown) {\n      toggleDropdown()\n    }\n  }\n\n  useEffect(() => {\n    document.addEventListener('click', handleClickOutside)\n\n    return () => {\n      document.removeEventListener('click', handleClickOutside)\n    }\n  })\n\n  const myLanguageContent = (\n    <LanguageMenuList\n      languages={languages}\n      onClick={handleLanguageClick}\n      currentIndex={currentIndex}\n    />\n  )\n\n  return (\n    <StyledContainer\n      className={className}\n      ref={element}\n      data-test={`language-dropdown-${testIdSuffix}`}>\n      <LanguageButton\n        data-test=\"ewb-app-header-language-button\"\n        onClick={onToggleDropdown}\n        isOpen={showDropdown}\n        primaryIcon={<StyleguideGlobeThin />}\n      />\n      <StyledDropdown isMobile={isMobile} showDropdown={showDropdown}>\n        {myLanguageContent}\n      </StyledDropdown>\n    </StyledContainer>\n  )\n}\n"],"names":["LanguageMenu","className","languages","testIdSuffix","extendedLanguageHandler","setupCurrentIndex","isMobile","useDropdownState","element","toggleDropdown","showDropdown","useState","currentIndex","setCurrentIndex","ref","useRef","handleClickOutside","event","current","_ref$current","contains","target","useEffect","document","addEventListener","removeEventListener","myLanguageContent","React","LanguageMenuList","onClick","index","item","StyledContainer","LanguageButton","isOpen","primaryIcon","StyleguideGlobeThin","StyledDropdown"],"mappings":"qjBA0BaA,EAAsC,gBACjDC,IAAAA,cACAC,UAAAA,aAAY,KACZC,IAAAA,aACAC,IAAAA,4BACAC,kBAAAA,cAAqB,QACrBC,SAAAA,kBAEkDC,IAA1CC,IAAAA,QAASC,IAAAA,eAAgBC,IAAAA,eACOC,EAAiBN,YAAlDO,OAAcC,OACfC,EAAMC,EAAoB,MAkB1BC,EAAqB,SAACC,mBACrBH,EAAII,sBAAJC,EAAaC,SAASH,EAAMI,UAAmBX,GAClDD,KAIJa,GAAU,kBACRC,SAASC,iBAAiB,QAASR,GAE5B,WACLO,SAASE,oBAAoB,QAAST,WAIpCU,EACJC,gBAACC,GACC1B,UAAWA,EACX2B,QA7BwB,SAACC,EAAOC,GAC9BrB,GACFD,IAGFI,EAAgBiB,GAEZ1B,GACFA,EAAwB2B,IAsBxBnB,aAAcA,WAKhBe,gBAACK,GACC/B,UAAWA,EACXa,IAAKN,0CAC2BL,IAChCwB,gBAACM,eACW,iCACVJ,QA7CmB,WACvBpB,KA6CIyB,OAAQxB,EACRyB,YAAaR,gBAACS,UAEhBT,gBAACU,GAAe/B,SAAUA,EAAUI,aAAcA,GAC/CgB"}