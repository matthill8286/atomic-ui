{"version":3,"file":"NavigationMenu.js","sources":["../../../../../src/components/Molecules/NavigationMenu/NavigationMenu.tsx"],"sourcesContent":["import React, { FC, useEffect, useRef } from 'react'\nimport { useDropdownState } from '@/components/Helper/useDropdownState'\nimport {\n  StyledContainer,\n  StyledDropdown,\n} from '@/components/Molecules/DropdownButton/DropdownButton'\nimport { NavigationButton } from './NavigationButton'\nimport {\n  NavigationButtonType,\n  NavigationMenuList,\n  NavigationMenuListProps,\n} from './NavigationMenuList'\nimport { CopyText } from '@/components/Atoms/Typography'\nimport { breakpoints, styled } from '@/styles'\nimport { ThemeColors } from '@/types'\nimport { useWindowDimensions } from '@/components/Helper'\n\nexport interface NavigationMenuProps {\n  className?: string\n  index?: number\n  button?: NavigationButtonType | undefined\n  testIdSuffix?: string\n  iconAsMainUi?: boolean\n  initialLink?: string\n  pictureSrc?: string\n  copyColor?: ThemeColors\n  navActionList: NavigationMenuListProps['navActionList']\n  extendedNavigationHandler?: (item?: NavigationMenuListProps) => void\n}\n\nexport const StyledCopy = styled(CopyText)`\n  ${({ theme }) => `\n    display: flex;\n    width: 100%;\n\n    :hover {\n        cursor: pointer;\n    }\n  `}\n`\n\nexport const NavigationMenu: FC<NavigationMenuProps> = ({\n  className,\n  navActionList = [],\n  button,\n  testIdSuffix,\n  extendedNavigationHandler,\n  iconAsMainUi = true,\n  initialLink,\n  copyColor,\n  pictureSrc,\n}) => {\n  const { element, toggleDropdown, showDropdown } = useDropdownState<HTMLDivElement>()\n  const { breakpoint: currentBreakpoint } = useWindowDimensions()\n  const isMobile = currentBreakpoint < breakpoints.md\n\n  const ref = useRef<HTMLElement>(null)\n\n  const onToggleDropdown = () => {\n    toggleDropdown()\n  }\n\n  const handleMenuItemClick = item => {\n    if (showDropdown) {\n      toggleDropdown()\n    }\n\n    if (extendedNavigationHandler) {\n      extendedNavigationHandler(item)\n    }\n  }\n\n  const handleClickOutside = (event: Event): void => {\n    if (!ref.current?.contains(event.target as Node) && showDropdown) {\n      toggleDropdown()\n    }\n  }\n\n  useEffect(() => {\n    document.addEventListener('click', handleClickOutside)\n\n    return () => {\n      document.removeEventListener('click', handleClickOutside)\n    }\n  })\n\n  const myNavigationContent = (\n    <NavigationMenuList\n      navActionList={navActionList}\n      actionButton={button}\n      flexed\n      padding=\"sm\"\n      onClick={handleMenuItemClick}\n    />\n  )\n\n  return (\n    <StyledContainer\n      className={className}\n      ref={element}\n      data-test={`navigation-dropdown-${testIdSuffix}`}>\n      {iconAsMainUi ? (\n        <NavigationButton\n          height={40}\n          width={40}\n          data-test=\"ewb-app-header-navigation-button\"\n          onClick={onToggleDropdown}\n          isOpen={showDropdown}\n          pictureSrc={pictureSrc}\n        />\n      ) : (\n        <StyledCopy\n          color={copyColor}\n          fontSize=\"sm\"\n          margin=\"auto\"\n          data-test=\"ewb-header-navigation-link\"\n          onClick={onToggleDropdown}>\n          {initialLink}\n        </StyledCopy>\n      )}\n      <StyledDropdown isMobile={isMobile} surface=\"white\" showDropdown={showDropdown}>\n        {myNavigationContent}\n      </StyledDropdown>\n    </StyledContainer>\n  )\n}\n"],"names":["StyledCopy","styled","CopyText","theme","NavigationMenu","className","navActionList","button","testIdSuffix","extendedNavigationHandler","iconAsMainUi","initialLink","copyColor","pictureSrc","useDropdownState","element","toggleDropdown","showDropdown","isMobile","useWindowDimensions","breakpoint","breakpoints","md","ref","useRef","onToggleDropdown","handleClickOutside","event","current","_ref$current","contains","target","useEffect","document","addEventListener","removeEventListener","myNavigationContent","React","NavigationMenuList","actionButton","flexed","padding","onClick","item","StyledContainer","NavigationButton","height","width","isOpen","color","fontSize","margin","StyledDropdown","surface"],"mappings":"knBA8BaA,EAAaC,EAAOC,oFAAPD,UACtB,qBAAGE,uGAUMC,EAA0C,gBACrDC,IAAAA,cACAC,cAAAA,aAAgB,KAChBC,IAAAA,OACAC,IAAAA,aACAC,IAAAA,8BACAC,aAAAA,gBACAC,IAAAA,YACAC,IAAAA,UACAC,IAAAA,aAEkDC,IAA1CC,IAAAA,QAASC,IAAAA,eAAgBC,IAAAA,aAE3BC,EADoCC,IAAlCC,WAC6BC,EAAYC,GAE3CC,EAAMC,EAAoB,MAE1BC,EAAmB,WACvBT,KAaIU,EAAqB,SAACC,mBACrBJ,EAAIK,sBAAJC,EAAaC,SAASH,EAAMI,UAAmBd,GAClDD,KAIJgB,GAAU,kBACRC,SAASC,iBAAiB,QAASR,GAE5B,WACLO,SAASE,oBAAoB,QAAST,WAIpCU,EACJC,gBAACC,GACChC,cAAeA,EACfiC,aAAchC,EACdiC,UACAC,QAAQ,KACRC,QA9BwB,SAAAC,GACtB1B,GACFD,IAGEP,GACFA,EAA0BkC,aA6B5BN,gBAACO,GACCvC,UAAWA,EACXkB,IAAKR,4CAC6BP,IACjCE,EACC2B,gBAACQ,GACCC,OAAQ,GACRC,MAAO,eACG,mCACVL,QAASjB,EACTuB,OAAQ/B,EACRJ,WAAYA,IAGdwB,gBAACrC,GACCiD,MAAOrC,EACPsC,SAAS,KACTC,OAAO,mBACG,6BACVT,QAASjB,GACRd,GAGL0B,gBAACe,GAAelC,SAAUA,EAAUmC,QAAQ,QAAQpC,aAAcA,GAC/DmB"}