{"version":3,"file":"TabBar.js","sources":["../../../../../src/components/Molecules/TabBar/TabBar.tsx"],"sourcesContent":["import React, { FC, Ref, useEffect, useRef, useState } from 'react'\nimport { Icon } from '@/components/Atoms/Icon'\nimport { useWindowDimensions } from '@/components/Helper/useWindowDimensions'\nimport { StyleguideArrow } from '@excelwithbusiness/webmobile-svg-library'\nimport { TabBarProps, TabData, TabId } from './TabBar.interface'\nimport {\n  StyledArrowButton,\n  StyledTabBar,\n  StyledTabsContainer,\n  StyledTabBarCard,\n} from './TabBar.styled'\nimport { TabItem } from './TabItem'\n\nexport const TabBar: FC<TabBarProps> = props => {\n  const {\n    onChange,\n    selected,\n    tabs,\n    tabGroupName,\n    enableSemanticTheme = false,\n    surfaceColor = 'surfaceColor',\n    elevation = 0,\n    noBorder = false,\n    isFixed = false,\n    changeDelay = 1000,\n    flexDirection,\n    ...otherProps\n  } = props\n\n  const [tab, setTab] = useState(selected || null)\n  const [hasOverflow, setHasOverflow] = useState(false)\n  const ref: Ref<HTMLDivElement> = useRef<HTMLDivElement>(null)\n  const { width } = useWindowDimensions()\n\n  const handleTabClick = (id: TabId, data?: TabData) => {\n    setTab(id)\n    if (onChange) {\n      onChange(id, data)\n    }\n  }\n\n  useEffect(() => {\n    const handler = setTimeout(() => {\n      if (tab !== selected && selected) {\n        setTab(selected)\n      }\n    }, changeDelay)\n\n    return () => {\n      clearTimeout(handler)\n    }\n  }, [selected, changeDelay])\n\n  useEffect(() => {\n    if (ref.current) {\n      const { offsetWidth, scrollWidth } = ref.current\n      const hasWidthOverflow = offsetWidth < scrollWidth\n\n      if (hasOverflow !== hasWidthOverflow) {\n        setHasOverflow(hasWidthOverflow)\n      }\n    }\n  }, [tabs, width])\n\n  const handlePrevClick = () => {\n    if (ref.current) {\n      ref.current.scrollBy({\n        behavior: 'smooth',\n        left: -200,\n      })\n    }\n  }\n\n  const handleNextClick = () => {\n    if (ref.current) {\n      ref.current.scrollBy({\n        behavior: 'smooth',\n        left: 200,\n      })\n    }\n  }\n\n  return (\n    <StyledTabBar isFixed={isFixed}>\n      <StyledTabBarCard\n        elevation={elevation}\n        shape=\"rounded-small\"\n        noBorder={noBorder ? ['top', 'right', 'bottom', 'left'] : []}\n        display=\"flex\"\n        surfaceColor={surfaceColor}\n        enableSemanticTheme={enableSemanticTheme}\n        {...otherProps}>\n        {hasOverflow && (\n          <StyledArrowButton\n            actionType=\"ghost\"\n            onClick={handlePrevClick}\n            surfaceColor={surfaceColor}\n            enableSemanticTheme={enableSemanticTheme}>\n            <Icon height={16} width={16} rotate={180}>\n              <StyleguideArrow />\n            </Icon>\n          </StyledArrowButton>\n        )}\n        <StyledTabsContainer flexDirection={flexDirection} ref={ref}>\n          {tabs.map(({ id, label, data, isDisabled = false }) => (\n            <TabItem\n              key={id}\n              id={id}\n              label={label}\n              data={data}\n              tabGroupName={tabGroupName}\n              isSelected={tab === id}\n              isDisabled={isDisabled}\n              onClick={handleTabClick}\n              enableSemanticTheme={enableSemanticTheme}\n              surfaceColor={surfaceColor}\n            />\n          ))}\n        </StyledTabsContainer>\n        {hasOverflow && (\n          <StyledArrowButton\n            actionType=\"ghost\"\n            onClick={handleNextClick}\n            enableSemanticTheme={enableSemanticTheme}\n            surfaceColor={surfaceColor}>\n            <Icon height={16} width={16}>\n              <StyleguideArrow />\n            </Icon>\n          </StyledArrowButton>\n        )}\n      </StyledTabBarCard>\n    </StyledTabBar>\n  )\n}\n\nTabBar.displayName = 'TabBar'\n"],"names":["TabBar","props","onChange","selected","tabs","tabGroupName","enableSemanticTheme","surfaceColor","elevation","noBorder","isFixed","changeDelay","flexDirection","otherProps","useState","tab","setTab","hasOverflow","setHasOverflow","ref","useRef","width","useWindowDimensions","handleTabClick","id","data","useEffect","handler","setTimeout","clearTimeout","current","hasWidthOverflow","offsetWidth","scrollWidth","React","StyledTabBar","StyledTabBarCard","shape","display","StyledArrowButton","actionType","onClick","scrollBy","behavior","left","Icon","height","rotate","StyleguideArrow","StyledTabsContainer","map","label","isDisabled","TabItem","key","isSelected","displayName"],"mappings":"2mBAaaA,EAA0B,SAAAC,OAEnCC,EAYED,EAZFC,SACAC,EAWEF,EAXFE,SACAC,EAUEH,EAVFG,KACAC,EASEJ,EATFI,eASEJ,EARFK,oBAAAA,kBAQEL,EAPFM,aAAAA,aAAe,mBAObN,EANFO,UAAAA,aAAY,MAMVP,EALFQ,SAAAA,kBAKER,EAJFS,QAAAA,kBAIET,EAHFU,YAAAA,aAAc,MACdC,EAEEX,EAFFW,cACGC,IACDZ,uJAEkBa,EAASX,GAAY,eAApCY,OAAKC,SAC0BF,GAAS,YAAxCG,OAAaC,OACdC,EAA2BC,EAAuB,MAChDC,EAAUC,IAAVD,MAEFE,EAAiB,SAACC,EAAWC,GACjCT,EAAOQ,GACHtB,GACFA,EAASsB,EAAIC,IAIjBC,GAAU,eACFC,EAAUC,YAAW,WACrBb,IAAQZ,GAAYA,GACtBa,EAAOb,KAERQ,UAEI,WACLkB,aAAaF,MAEd,CAACxB,EAAUQ,IAEde,GAAU,cACJP,EAAIW,QAAS,OACsBX,EAAIW,QACnCC,IADEC,cAAaC,YAGjBhB,IAAgBc,GAClBb,EAAea,MAGlB,CAAC3B,EAAMiB,WAqBRa,gBAACC,GAAazB,QAASA,GACrBwB,gBAACE,KACC5B,UAAWA,EACX6B,MAAM,gBACN5B,SAAUA,EAAW,CAAC,MAAO,QAAS,SAAU,QAAU,GAC1D6B,QAAQ,OACR/B,aAAcA,EACdD,oBAAqBA,GACjBO,GACHI,GACCiB,gBAACK,GACCC,WAAW,QACXC,QA/Bc,WAClBtB,EAAIW,SACNX,EAAIW,QAAQY,SAAS,CACnBC,SAAU,SACVC,MAAO,OA4BHrC,aAAcA,EACdD,oBAAqBA,GACrB4B,gBAACW,GAAKC,OAAQ,GAAIzB,MAAO,GAAI0B,OAAQ,KACnCb,gBAACc,UAIPd,gBAACe,GAAoBrC,cAAeA,EAAeO,IAAKA,GACrDf,EAAK8C,KAAI,gBAAG1B,IAAAA,GAAI2B,IAAAA,MAAO1B,IAAAA,SAAM2B,WAAAA,uBAC5BlB,gBAACmB,GACCC,IAAK9B,EACLA,GAAIA,EACJ2B,MAAOA,EACP1B,KAAMA,EACNpB,aAAcA,EACdkD,WAAYxC,IAAQS,EACpB4B,WAAYA,EACZX,QAASlB,EACTjB,oBAAqBA,EACrBC,aAAcA,QAInBU,GACCiB,gBAACK,GACCC,WAAW,QACXC,QAjDc,WAClBtB,EAAIW,SACNX,EAAIW,QAAQY,SAAS,CACnBC,SAAU,SACVC,KAAM,OA8CFtC,oBAAqBA,EACrBC,aAAcA,GACd2B,gBAACW,GAAKC,OAAQ,GAAIzB,MAAO,IACvBa,gBAACc,aASfhD,EAAOwD,YAAc"}