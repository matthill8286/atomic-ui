{"version":3,"file":"Dropdown.js","sources":["../../../../../src/components/Molecules/Dropdown/Dropdown.tsx"],"sourcesContent":["import React, { FC, useState } from 'react'\nimport { InputDivider as Divider } from '@/components/Atoms/Input/InputDivider'\nimport { CopyText } from '@/components/Atoms/Typography'\nimport { withDropdownState } from '@/components/Helper/withDropdownState'\nimport { IconArrow, StyleguideArrow } from '@excelwithbusiness/webmobile-svg-library'\nimport { DropdownPropsEnhanced } from './Dropdown.interface'\nimport {\n  StyledContainer,\n  StyledDropdown,\n  StyledDropdownSelect,\n  StyledFieldWrapper,\n  StyledIcon,\n  StyledList,\n  StyledTypo,\n} from './Dropdown.styled'\nimport { DropdownOption } from './DropdownOption'\n\nconst DropdownWithoutState: FC<DropdownPropsEnhanced> = props => {\n  const {\n    autoComplete,\n    initialIndex,\n    label,\n    listType = 'custom',\n    onChange,\n    placeholder,\n    options = [],\n    showDropdown,\n    toggleDropdown,\n    withBackground,\n    noBorder,\n  } = props\n\n  let setupCurrentIndex = -1\n  const lastIndexOfOptions = options.length - 1\n\n  if (initialIndex === 0 || !!initialIndex) {\n    if (initialIndex >= 0 && initialIndex <= lastIndexOfOptions) {\n      setupCurrentIndex = initialIndex\n    }\n  }\n\n  const [currentIndex, setCurrentIndex] = useState<number>(setupCurrentIndex)\n  const [isFilled, setFill] = useState<boolean>(() => currentIndex !== -1)\n\n  const handleItemClick = (index: number) => () => {\n    setCurrentIndex(index)\n    setFill(true)\n    if (onChange) onChange(index)\n  }\n\n  const handleSelectChange = (ev: React.ChangeEvent<HTMLSelectElement>): void => {\n    const index = options.findIndex(({ id }) => id === ev.target.value)\n    if (index !== -1) {\n      handleItemClick(index)()\n    }\n  }\n\n  const selectedItem = options.find((o, i) => i === currentIndex)\n\n  return (\n    <StyledContainer onClick={toggleDropdown}>\n      {label && (\n        <CopyText tag=\"label\" color={isFilled ? 'grey5' : 'grey4'} data-label-filled={isFilled}>\n          {label}\n        </CopyText>\n      )}\n      {listType === 'custom' ? (\n        <StyledDropdown hasLabel={!!label} withBackground={withBackground}>\n          <StyledTypo fontSize=\"sm\" limitLines={1} lineHeight=\"sm\" tag=\"span\">\n            {currentIndex !== -1 ? options[currentIndex].label : placeholder}\n          </StyledTypo>\n          <StyledIcon rotate={showDropdown ? -90 : 90}>\n            <StyleguideArrow width={'md'} height={'md'} />\n          </StyledIcon>\n\n          <StyledList active={!!showDropdown} isSearchable={false}>\n            {options.map((item, index) => (\n              <DropdownOption\n                key={index}\n                active={index === currentIndex}\n                label={item.label}\n                onClick={handleItemClick(index)}\n              />\n            ))}\n          </StyledList>\n        </StyledDropdown>\n      ) : (\n        <StyledFieldWrapper noBorder={noBorder} hasLabel={!!label}>\n          <StyledDropdownSelect\n            listType={listType}\n            onChange={handleSelectChange}\n            {...(selectedItem?.id ? { value: selectedItem.id } : {})}\n            {...(autoComplete ? { autoComplete } : {})}>\n            {options.map((item, i) => {\n              return (\n                <option key={item.id || `dropdown-${i}`} value={item.id}>\n                  {item.label}\n                </option>\n              )\n            })}\n          </StyledDropdownSelect>\n          <StyledIcon width={16} height={16} rotate={90}>\n            <IconArrow />\n          </StyledIcon>\n        </StyledFieldWrapper>\n      )}\n    </StyledContainer>\n  )\n}\n\nexport const Dropdown = withDropdownState(DropdownWithoutState, { displayName: 'Dropdown' })\n"],"names":["Dropdown","withDropdownState","props","autoComplete","initialIndex","label","listType","onChange","placeholder","options","showDropdown","toggleDropdown","withBackground","noBorder","setupCurrentIndex","lastIndexOfOptions","length","useState","currentIndex","setCurrentIndex","isFilled","setFill","handleItemClick","index","selectedItem","find","o","i","React","StyledContainer","onClick","CopyText","tag","color","StyledDropdown","hasLabel","StyledTypo","fontSize","limitLines","lineHeight","StyledIcon","rotate","StyleguideArrow","width","height","StyledList","active","isSearchable","map","item","DropdownOption","key","StyledFieldWrapper","StyledDropdownSelect","ev","findIndex","id","target","value","IconArrow","displayName"],"mappings":"svBAiBA,IA6FaA,EAAWC,GA7FgC,SAAAC,OAEpDC,EAWED,EAXFC,aACAC,EAUEF,EAVFE,aACAC,EASEH,EATFG,QASEH,EARFI,SAAAA,aAAW,WACXC,EAOEL,EAPFK,SACAC,EAMEN,EANFM,cAMEN,EALFO,QAAAA,aAAU,KACVC,EAIER,EAJFQ,aACAC,EAGET,EAHFS,eACAC,EAEEV,EAFFU,eACAC,EACEX,EADFW,SAGEC,GAAqB,EACnBC,EAAqBN,EAAQO,OAAS,GAEvB,IAAjBZ,GAAwBA,IACtBA,GAAgB,GAAKA,GAAgBW,IACvCD,EAAoBV,SAIgBa,EAAiBH,YAAlDI,OAAcC,SACOF,GAAkB,kBAAwB,IAAlBC,cAA7CE,OAAUC,OAEXC,EAAkB,SAACC,UAAkB,WACzCJ,EAAgBI,GAChBF,GAAQ,GACJd,GAAUA,EAASgB,KAUnBC,EAAef,EAAQgB,MAAK,SAACC,EAAGC,UAAMA,IAAMT,YAGhDU,gBAACC,GAAgBC,QAASnB,GACvBN,GACCuB,gBAACG,GAASC,IAAI,QAAQC,MAAOb,EAAW,QAAU,4BAA4BA,GAC3Ef,GAGS,WAAbC,EACCsB,gBAACM,GAAeC,WAAY9B,EAAOO,eAAgBA,GACjDgB,gBAACQ,GAAWC,SAAS,KAAKC,WAAY,EAAGC,WAAW,KAAKP,IAAI,SACxC,IAAlBd,EAAsBT,EAAQS,GAAcb,MAAQG,GAEvDoB,gBAACY,GAAWC,OAAQ/B,GAAgB,GAAK,IACvCkB,gBAACc,GAAgBC,MAAO,KAAMC,OAAQ,QAGxChB,gBAACiB,GAAWC,SAAUpC,EAAcqC,cAAc,GAC/CtC,EAAQuC,KAAI,SAACC,EAAM1B,UAClBK,gBAACsB,GACCC,IAAK5B,EACLuB,OAAQvB,IAAUL,EAClBb,MAAO4C,EAAK5C,MACZyB,QAASR,EAAgBC,UAMjCK,gBAACwB,GAAmBvC,SAAUA,EAAUsB,WAAY9B,GAClDuB,gBAACyB,KACC/C,SAAUA,EACVC,SAxCiB,SAAC+C,OACpB/B,EAAQd,EAAQ8C,WAAU,qBAAGC,KAAgBF,EAAGG,OAAOC,UAC9C,IAAXnC,GACFD,EAAgBC,EAAhBD,KAsCWE,MAAAA,GAAAA,EAAcgC,GAAK,CAAEE,MAAOlC,EAAagC,IAAO,GAChDrD,EAAe,CAAEA,aAAAA,GAAiB,IACtCM,EAAQuC,KAAI,SAACC,EAAMtB,UAEhBC,0BAAQuB,IAAKF,EAAKO,uBAAkB7B,GAAK+B,MAAOT,EAAKO,IAClDP,EAAK5C,WAKduB,gBAACY,GAAWG,MAAO,GAAIC,OAAQ,GAAIH,OAAQ,IACzCb,gBAAC+B,aAQmD,CAAEC,YAAa"}