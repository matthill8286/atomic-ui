{"version":3,"file":"ScrollSnapSlider.js","sources":["../../../../../src/components/Molecules/ScrollSnapSlider/ScrollSnapSlider.tsx"],"sourcesContent":["import React, { useEffect } from 'react'\n\n// 3rd-party\nimport { Slider } from '@lifarl/react-scroll-snap-slider'\n\n// types and styled components\nimport { ScrollSnapSliderProps } from './ScrollSnapSlider.interface'\nimport { NavArrow } from './NavArrow'\nimport { Scrollbar } from './Scrollbar'\n\n// custom-styled components\nimport {\n  StyledHeading,\n  StyledOverflowWrapper,\n  StyledWrapper,\n  StyledHeadingNoGrid,\n  StyledGridScrollbar,\n} from './ScrollSnapSlider.styled'\n\nconst scrollSnapPolyfill =\n  typeof window !== 'undefined' ? require('css-scroll-snap-polyfill') : null\n\nexport {\n  StyledCarousel as StyledScrollSnapSliderCarousel,\n  StyledSlider as StyledScrollSnapSliderSlider,\n  StyledUl as StyledScrollSnapSliderList,\n  StyledSlide as StyledScrollSnapSliderSlide,\n  StyledNavWrapper as StyledScrollSnapSliderNavWrapper,\n  StyledArrow as StyledScrollSnapSliderArrow,\n} from '@lifarl/react-scroll-snap-slider'\nexport { StyledScrollbar as StyledScrollSnapSliderScrollbar } from './ScrollSnapSlider.styled'\n\nexport interface ScrollSnapSliderRef {\n  scrollToSlide: () => void\n  sliderRef: React.RefObject<HTMLDivElement>\n}\n\nexport const ScrollSnapSlider: React.FC<ScrollSnapSliderProps> = React.forwardRef<\n  ScrollSnapSliderRef,\n  ScrollSnapSliderProps\n>(\n  (\n    {\n      slidesPerPageSettings,\n      title,\n      withGrid = false,\n      isGridLayout = true,\n      showArrows = true,\n      showScrollbar = false,\n      fixedArrowPosition = true,\n      zeroArrowPosition = false,\n      overEdgePosition = false,\n      arrowPrevClass,\n      arrowNextClass,\n      arrowDataTest,\n      showArrowsOnHover = true,\n      slideWidth,\n      onScrollStart,\n      onScrollEnd,\n      onSlidesVisibilityChange,\n      onSlideVisible,\n      children,\n      ...props\n    },\n    externalRef\n  ) => {\n    useEffect(() => {\n      scrollSnapPolyfill()\n    }, [])\n\n    const [, rerender] = React.useState(false)\n\n    const internalRef = React.useRef<ScrollSnapSliderRef | null>(null)\n\n    const renderCustomArrow = ({ direction, ref, onClick }) => (\n      <NavArrow\n        direction={direction}\n        ref={ref}\n        onClick={() => onClick(direction)}\n        showArrows={showArrows}\n        fixedArrowPosition={fixedArrowPosition}\n        zeroArrowPosition={zeroArrowPosition}\n      />\n    )\n\n    const setRefs = React.useCallback(\n      carouselRef => {\n        internalRef.current = carouselRef as ScrollSnapSliderRef\n\n        if (typeof externalRef !== 'function' && externalRef) {\n          externalRef.current = carouselRef as ScrollSnapSliderRef\n        }\n\n        // @TODO: if typeof externalRef === 'function'\n\n        rerender(showScrollbar)\n      },\n      [externalRef, internalRef, rerender, showScrollbar]\n    )\n\n    const renderContent = () => (\n      <StyledWrapper isGridLayout={isGridLayout} showArrowsOnHover={showArrowsOnHover} {...props}>\n        <Slider\n          ref={setRefs}\n          slideWidth={slideWidth}\n          slidesPerPageSettings={slidesPerPageSettings}\n          renderCustomArrow={renderCustomArrow}\n          onScrollStart={onScrollStart}\n          onScrollEnd={onScrollEnd}\n          onSlidesVisibilityChange={onSlidesVisibilityChange}\n          onSlideVisible={onSlideVisible}>\n          {children}\n        </Slider>\n      </StyledWrapper>\n    )\n\n    if (withGrid) {\n      return (\n        <StyledOverflowWrapper>\n          {title ? <StyledHeading>{title}</StyledHeading> : null}\n          {renderContent()}\n          {showScrollbar && (\n            <StyledGridScrollbar>\n              <Scrollbar sliderRef={internalRef.current?.sliderRef} />\n            </StyledGridScrollbar>\n          )}\n        </StyledOverflowWrapper>\n      )\n    }\n\n    return (\n      <>\n        {title ? <StyledHeadingNoGrid>{title}</StyledHeadingNoGrid> : null}\n        {renderContent()}\n        {showScrollbar && <Scrollbar sliderRef={internalRef.current?.sliderRef} />}\n      </>\n    )\n  }\n)\n"],"names":["scrollSnapPolyfill","window","require","ScrollSnapSlider","React","forwardRef","externalRef","slidesPerPageSettings","title","withGrid","isGridLayout","showArrows","showScrollbar","fixedArrowPosition","zeroArrowPosition","overEdgePosition","arrowPrevClass","arrowNextClass","arrowDataTest","showArrowsOnHover","slideWidth","onScrollStart","onScrollEnd","onSlidesVisibilityChange","onSlideVisible","children","props","useEffect","useState","rerender","internalRef","useRef","renderCustomArrow","direction","ref","onClick","NavArrow","setRefs","useCallback","carouselRef","current","renderContent","StyledWrapper","Slider","StyledOverflowWrapper","StyledHeading","StyledGridScrollbar","Scrollbar","sliderRef","_internalRef$current","StyledHeadingNoGrid","_internalRef$current2"],"mappings":"u7BAmBA,IAAMA,EACc,oBAAXC,OAAyBC,QAAQ,4BAA8B,KAiB3DC,EAAoDC,EAAMC,YAIrE,WAuBEC,SArBEC,IAAAA,sBACAC,IAAAA,UACAC,SAAAA,oBACAC,aAAAA,oBACAC,WAAAA,oBACAC,cAAAA,oBACAC,mBAAAA,oBACAC,kBAAAA,kBACAC,mBACAC,iBACAC,iBACAC,sBACAC,kBAAAA,gBACAC,IAAAA,WACAC,IAAAA,cACAC,IAAAA,YACAC,IAAAA,yBACAC,IAAAA,eACAC,IAAAA,SACGC,oUAILC,GAAU,WACR3B,MACC,YAEkBI,EAAMwB,UAAS,GAA3BC,YAEHC,EAAc1B,EAAM2B,OAAmC,MAEvDC,EAAoB,gBAAGC,IAAAA,UAAWC,IAAAA,IAAKC,IAAAA,eAC3C/B,gBAACgC,GACCH,UAAWA,EACXC,IAAKA,EACLC,QAAS,kBAAMA,EAAQF,IACvBtB,WAAYA,EACZE,mBAAoBA,EACpBC,kBAAmBA,KAIjBuB,EAAUjC,EAAMkC,aACpB,SAAAC,GACET,EAAYU,QAAUD,EAEK,mBAAhBjC,GAA8BA,IACvCA,EAAYkC,QAAUD,GAKxBV,EAASjB,KAEX,CAACN,EAAawB,EAAaD,EAAUjB,IAGjC6B,EAAgB,kBACpBrC,gBAACsC,KAAchC,aAAcA,EAAcS,kBAAmBA,GAAuBO,GACnFtB,gBAACuC,GACCT,IAAKG,EACLjB,WAAYA,EACZb,sBAAuBA,EACvByB,kBAAmBA,EACnBX,cAAeA,EACfC,YAAaA,EACbC,yBAA0BA,EAC1BC,eAAgBA,GACfC,YAKHhB,EAEAL,gBAACwC,OACEpC,EAAQJ,gBAACyC,OAAerC,GAAyB,KACjDiC,IACA7B,GACCR,gBAAC0C,OACC1C,gBAAC2C,GAAUC,oBAAWlB,EAAYU,4BAAZS,EAAqBD,cAQnD5C,gCACGI,EAAQJ,gBAAC8C,OAAqB1C,GAA+B,KAC7DiC,IACA7B,GAAiBR,gBAAC2C,GAAUC,oBAAWlB,EAAYU,4BAAZW,EAAqBH"}