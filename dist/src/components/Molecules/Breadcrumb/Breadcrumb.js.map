{"version":3,"file":"Breadcrumb.js","sources":["../../../../../src/components/Molecules/Breadcrumb/Breadcrumb.tsx"],"sourcesContent":["import * as React from 'react'\nimport { Icon } from '@/components/Atoms/Icon'\nimport { Link } from '@/components/Atoms/Link'\nimport { IconForwardSlash, StyleguideHomeVs } from '@excelwithbusiness/webmobile-svg-library'\nimport { BreadcrumbPath, BreadcrumbProps } from './Breadcrumb.interface'\nimport { StyledBreadcrumb, StyledHomeLink, StyledLi, StyledUl } from './Breadcrumb.styled'\nimport { useWindowDimensions } from '@/components/Helper'\n\nconst _renderSEOMeta = (paths: BreadcrumbPath[], homeLink: string): JSX.Element => {\n  const breadcrumbSeoPaths: BreadcrumbPath[] = [...paths]\n\n  const homeBreadcrumbPath: BreadcrumbPath = {\n    name: 'home',\n    link: homeLink,\n  }\n\n  breadcrumbSeoPaths.unshift(homeBreadcrumbPath)\n\n  const meta = {\n    '@context': 'https://schema.org',\n    '@type': 'BreadcrumbList',\n    itemListElement: breadcrumbSeoPaths.map((seoPath, i) => ({\n      '@type': 'ListItem',\n      position: i + 1,\n      name: seoPath.name,\n      item: seoPath.link + (i === breadcrumbSeoPaths.length - 1 ? '#top' : ''),\n    })),\n  }\n\n  return (\n    <script type=\"application/ld+json\" dangerouslySetInnerHTML={{ __html: JSON.stringify(meta) }} />\n  )\n}\n\nexport const Breadcrumb: React.FC<BreadcrumbProps> = ({\n  className,\n  margin,\n  padding,\n  paths,\n  loading = false,\n  homeLink = '/',\n  hideLastElement = false,\n  isHomeRouterLink = true,\n  homeValue = 'Home',\n  textColor = 'grey5',\n  linkColor = 'grey5',\n  iconColor = 'grey5',\n  decorationColor,\n  ...otherProps\n}): JSX.Element => {\n  const { breakpointName } = useWindowDimensions()\n  const smallScreens = ['xs', undefined].includes(breakpointName)\n  const visiblePaths = hideLastElement || smallScreens ? [...paths].slice(0, -1) : paths\n\n  return (\n    <>\n      {_renderSEOMeta(paths, homeLink)}\n      <StyledBreadcrumb\n        className={className}\n        margin={margin}\n        padding={padding}\n        isLoading={loading}\n        data-test=\"filtered-breadcrumb-ul\"\n        data-paths-count={paths.length}\n        {...otherProps}>\n        <StyledUl>\n          <StyledLi isLastButOne={false}>\n            <StyledHomeLink\n              inline\n              {...(isHomeRouterLink ? { to: homeLink } : { href: homeLink })}\n              fontSize=\"xs\"\n              underline={false}\n              iconLeft={\n                <Icon height=\"sm\" width=\"sm\" color={iconColor}>\n                  {!loading && <StyleguideHomeVs fill={iconColor} />}\n                </Icon>\n              }\n            />\n          </StyledLi>\n          {visiblePaths &&\n            visiblePaths.map((item, index) => {\n              const isLast = visiblePaths.length - 1 === index && !hideLastElement\n              const isLastButOne = visiblePaths.length - 2 === index\n              return (\n                <StyledLi key={item.name} isLastButOne={isLastButOne}>\n                  <Link\n                    fontSize=\"sm\"\n                    inline\n                    underline={false}\n                    disabled={!smallScreens && isLast}\n                    decorationColor={decorationColor}\n                    iconLeft={<Icon color={iconColor}>{!loading && <IconForwardSlash />}</Icon>}\n                    {...(item.isRouterLink ? { to: item.link } : { href: item.link })}>\n                    {item.name}\n                  </Link>\n                </StyledLi>\n              )\n            })}\n        </StyledUl>\n      </StyledBreadcrumb>\n    </>\n  )\n}\n\nBreadcrumb.displayName = 'Breadcrumb'\n"],"names":["Breadcrumb","className","margin","padding","paths","loading","homeLink","hideLastElement","isHomeRouterLink","homeValue","textColor","linkColor","iconColor","decorationColor","otherProps","breakpointName","useWindowDimensions","smallScreens","undefined","includes","visiblePaths","_toConsumableArray","slice","React","breadcrumbSeoPaths","homeBreadcrumbPath","name","link","unshift","meta","itemListElement","map","seoPath","i","position","item","length","type","dangerouslySetInnerHTML","__html","JSON","stringify","_renderSEOMeta","StyledBreadcrumb","isLoading","StyledUl","StyledLi","isLastButOne","StyledHomeLink","inline","to","href","fontSize","underline","iconLeft","Icon","height","width","color","StyleguideHomeVs","fill","index","isLast","key","Link","disabled","IconForwardSlash","isRouterLink","displayName"],"mappings":"0rBAQA,IA0BaA,EAAwC,gBACnDC,IAAAA,UACAC,IAAAA,OACAC,IAAAA,QACAC,IAAAA,UACAC,QAAAA,oBACAC,SAAAA,aAAW,UACXC,gBAAAA,oBACAC,iBAAAA,kBACAC,YACAC,YACAC,kBACAC,UAAAA,aAAY,UACZC,IAAAA,gBACGC,4KAEKC,EAAmBC,IAAnBD,eACFE,EAAe,CAAC,UAAMC,GAAWC,SAASJ,GAC1CK,EAAeb,GAAmBU,EAAeI,EAAIjB,GAAOkB,MAAM,GAAI,GAAKlB,SAG/EmB,gCA/CmB,SAACnB,EAAyBE,OACzCkB,IAA2CpB,GAE3CqB,EAAqC,CACzCC,KAAM,OACNC,KAAMrB,GAGRkB,EAAmBI,QAAQH,OAErBI,EAAO,YACC,6BACH,iBACTC,gBAAiBN,EAAmBO,KAAI,SAACC,EAASC,SAAO,SAC9C,WACTC,SAAUD,EAAI,EACdP,KAAMM,EAAQN,KACdS,KAAMH,EAAQL,MAAQM,IAAMT,EAAmBY,OAAS,EAAI,OAAS,gBAKvEb,0BAAQc,KAAK,sBAAsBC,wBAAyB,CAAEC,OAAQC,KAAKC,UAAUZ,MA0BlFa,CAAetC,EAAOE,GACvBiB,gBAACoB,KACC1C,UAAWA,EACXC,OAAQA,EACRC,QAASA,EACTyC,UAAWvC,cACD,4CACQD,EAAMgC,QACpBtB,GACJS,gBAACsB,OACCtB,gBAACuB,GAASC,cAAc,GACtBxB,gBAACyB,KACCC,WACKzC,EAAmB,CAAE0C,GAAI5C,GAAa,CAAE6C,KAAM7C,IACnD8C,SAAS,KACTC,WAAW,EACXC,SACE/B,gBAACgC,GAAKC,OAAO,KAAKC,MAAM,KAAKC,MAAO9C,IAChCP,GAAWkB,gBAACoC,GAAiBC,KAAMhD,SAK5CQ,GACCA,EAAaW,KAAI,SAACI,EAAM0B,OAChBC,EAAS1C,EAAagB,OAAS,IAAMyB,IAAUtD,EAC/CwC,EAAe3B,EAAagB,OAAS,IAAMyB,SAE/CtC,gBAACuB,GAASiB,IAAK5B,EAAKT,KAAMqB,aAAcA,GACtCxB,gBAACyC,KACCZ,SAAS,KACTH,UACAI,WAAW,EACXY,UAAWhD,GAAgB6C,EAC3BjD,gBAAiBA,EACjByC,SAAU/B,gBAACgC,GAAKG,MAAO9C,IAAaP,GAAWkB,gBAAC2C,UAC3C/B,EAAKgC,aAAe,CAAEjB,GAAIf,EAAKR,MAAS,CAAEwB,KAAMhB,EAAKR,OACzDQ,EAAKT,cAW1B1B,EAAWoE,YAAc"}