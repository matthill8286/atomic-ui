{"version":3,"file":"VideoPlayerWrapper.js","sources":["../../../../../src/components/Atoms/VideoPlayer/VideoPlayerWrapper.tsx"],"sourcesContent":["import React from 'react'\nimport { SkeletonBlockItem } from '@/components/Atoms/Skeleton'\nimport { VideoPlayerProps } from '@/components/Atoms/VideoPlayer/VideoPlayer.interface'\nimport { EmbeddedWrapper } from '@/components/Atoms/EmbeddedPlayer'\nimport { VideoPlayerCore } from '@/components/Atoms/VideoPlayer/VideoPlayerCore'\n\nexport const VideoPlayerWrapper: React.FC<VideoPlayerProps> = ({\n  title = 'core video player',\n  unsupportedMedia,\n  context = 'page',\n  videoId = 'player-core',\n  width = '100%',\n  height = '100%',\n  url,\n  pip = false,\n  controls = true,\n  light = false,\n  loop = false,\n  loading,\n  playbackRate = 1,\n  playing,\n  volume = 0.6,\n  muted = false,\n  allowfullscreen = false,\n  rounded = false,\n  stopOnUnmount = true,\n  maxHeight,\n  onStart,\n  onPause,\n  onPlay,\n  onError,\n  onEnded,\n  onProgress,\n  onDuration,\n  children,\n  ...props\n}) => {\n  if (loading) {\n    return <SkeletonBlockItem height=\"350px\" />\n  }\n\n  if (unsupportedMedia) {\n    return (\n      <EmbeddedWrapper\n        height={height}\n        aspect=\"16/9\"\n        width={width}\n        embedUrl={url}\n        title={title}\n        allowfullscreen={false}\n      />\n    )\n  }\n\n  return (\n    <VideoPlayerCore\n      videoId={videoId}\n      width={width}\n      height={height}\n      url={url}\n      pip={pip}\n      playing={playing}\n      controls={controls}\n      rounded={rounded ?? undefined}\n      light={light}\n      loop={loop}\n      playbackRate={playbackRate}\n      volume={volume}\n      muted={muted}\n      onStart={onStart}\n      onPlay={onPlay}\n      onPause={onPause}\n      onProgress={onProgress}\n      onError={onError}\n      onDuration={onDuration}\n    />\n  )\n}\n"],"names":["VideoPlayerWrapper","title","unsupportedMedia","context","videoId","width","height","url","pip","controls","light","loop","loading","playbackRate","playing","volume","muted","allowfullscreen","rounded","stopOnUnmount","maxHeight","onStart","onPause","onPlay","onError","onEnded","onProgress","onDuration","children","React","SkeletonBlockItem","EmbeddedWrapper","aspect","embedUrl","VideoPlayerCore","undefined"],"mappings":"uTAMaA,EAAiD,oBAC5DC,MAAAA,aAAQ,sBACRC,IAAAA,mBACAC,gBACAC,QAAAA,aAAU,oBACVC,MAAAA,aAAQ,aACRC,OAAAA,aAAS,SACTC,IAAAA,QACAC,IAAAA,oBACAC,SAAAA,oBACAC,MAAAA,oBACAC,KAAAA,gBACAC,IAAAA,YACAC,aAAAA,aAAe,IACfC,IAAAA,YACAC,OAAAA,aAAS,SACTC,MAAAA,kBACAC,wBACAC,QAAAA,kBACAC,gBACAC,cACAC,IAAAA,QACAC,IAAAA,QACAC,IAAAA,OACAC,IAAAA,UACAC,YACAC,IAAAA,WACAC,IAAAA,oBACAC,wTAGIhB,EACKiB,gBAACC,GAAkBxB,OAAO,UAG/BJ,EAEA2B,gBAACE,GACCzB,OAAQA,EACR0B,OAAO,OACP3B,MAAOA,EACP4B,SAAU1B,EACVN,MAAOA,EACPgB,iBAAiB,IAMrBY,gBAACK,GACC9B,QAASA,EACTC,MAAOA,EACPC,OAAQA,EACRC,IAAKA,EACLC,IAAKA,EACLM,QAASA,EACTL,SAAUA,EACVS,QAASA,MAAAA,EAAAA,OAAWiB,EACpBzB,MAAOA,EACPC,KAAMA,EACNE,aAAcA,EACdE,OAAQA,EACRC,MAAOA,EACPK,QAASA,EACTE,OAAQA,EACRD,QAASA,EACTI,WAAYA,EACZF,QAASA,EACTG,WAAYA"}