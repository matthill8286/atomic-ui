{"version":3,"file":"InputIcon.js","sources":["../../../../../src/components/Atoms/Input/InputIcon.tsx"],"sourcesContent":["import React, { ReactNode } from 'react'\nimport { Icon } from '@/components/Atoms/Icon'\nimport { defaultSpacing } from '@/styles'\nimport { styled } from '@/styles/styled'\nimport { IconClose, IconEdit } from '@excelwithbusiness/webmobile-svg-library'\nimport { ThemeColors } from '@/types'\nimport { TranslatedText } from '@/types/global'\nimport { IconButton } from '../Button/IconButton'\nimport { IconSize } from './Input.interface'\n\nexport type InputIconState = 'default' | 'valid' | 'error'\n\nconst StyledIconWrapper = styled.div`\n  position: absolute;\n  top: ${({ theme }) => theme.spacing.base.sm};\n  right: ${({ theme }) => theme.spacing.base.sm};\n  height: 100%;\n\n  > button {\n    background: none;\n    border: none;\n    margin: 0;\n    padding: 0;\n    top: ${3.5 * defaultSpacing}px;\n\n    /* TODO - a11y: Remove the following once there are focus styles from UX */\n    outline: none;\n\n    &:focus {\n      svg {\n        fill: ${({ theme }) => theme.color.black};\n      }\n    }\n  }\n`\n\ntype MapStateToIcon = {\n  [key in InputIconState]: JSX.Element\n}\n\nconst mapStateToIcon: MapStateToIcon = {\n  default: <div />,\n  valid: <IconClose />,\n  error: <IconEdit />,\n}\n\ntype MapStateToIconColor = {\n  [key in InputIconState]: ThemeColors\n}\n\nconst mapStateToIconColor: MapStateToIconColor = {\n  default: 'grey3',\n  valid: 'success',\n  error: 'error',\n}\n\nexport interface InputIconProps {\n  icon?: ReactNode\n  iconLabel?: TranslatedText // TODO - a11y: make required once teams have been informed that we need a label\n  iconSize?: IconSize\n  iconState: InputIconState\n  onClick?: React.MouseEventHandler<HTMLDivElement> | React.MouseEventHandler<HTMLElement>\n}\n\nexport const InputIcon = (props: InputIconProps) => {\n  const { icon, iconSize = { height: 20, width: 20 }, iconState, onClick, iconLabel } = props\n  const color = mapStateToIconColor[iconState]\n  const iconComp = (\n    <Icon as=\"span\" color={color} {...iconSize}>\n      {icon ? icon : mapStateToIcon[iconState]}\n    </Icon>\n  )\n\n  return (\n    <StyledIconWrapper>\n      {onClick ? (\n        <IconButton\n          aria-label={iconLabel}\n          height={iconSize.height}\n          isInputIcon\n          onClick={onClick as React.MouseEventHandler<HTMLElement>}\n          width={iconSize.width}>\n          {iconComp}\n        </IconButton>\n      ) : (\n        iconComp\n      )}\n    </StyledIconWrapper>\n  )\n}\n"],"names":["StyledIconWrapper","styled","div","theme","spacing","base","sm","defaultSpacing","color","black","mapStateToIcon","default","React","valid","IconClose","error","IconEdit","mapStateToIconColor","InputIcon","props","icon","iconSize","height","width","iconState","onClick","iconLabel","iconComp","Icon","as","IconButton","isInputIcon"],"mappings":"whBAYA,IAAMA,EAAoBC,EAAOC,uFAAPD,8JAEjB,qBAAGE,MAAkBC,QAAQC,KAAKC,MAChC,qBAAGH,MAAkBC,QAAQC,KAAKC,KAQlC,IAAMC,GAOD,qBAAGJ,MAAkBK,MAAMC,SAUrCC,EAAiC,CACrCC,QAASC,4BACTC,MAAOD,gBAACE,QACRC,MAAOH,gBAACI,SAOJC,EAA2C,CAC/CN,QAAS,QACTE,MAAO,UACPE,MAAO,SAWIG,EAAY,SAACC,OAChBC,EAA8ED,EAA9EC,OAA8ED,EAAxEE,SAAAA,aAAW,CAAEC,OAAQ,GAAIC,MAAO,MAAMC,EAAkCL,EAAlCK,UAAWC,EAAuBN,EAAvBM,QAASC,EAAcP,EAAdO,UAClElB,EAAQS,EAAoBO,GAC5BG,EACJf,gBAACgB,KAAKC,GAAG,OAAOrB,MAAOA,GAAWa,GAC/BD,GAAcV,EAAec,WAKhCZ,gBAACZ,OACEyB,EACCb,gBAACkB,gBACaJ,EACZJ,OAAQD,EAASC,OACjBS,eACAN,QAASA,EACTF,MAAOF,EAASE,OACfI,GAGHA"}