{"version":3,"file":"Selectable.js","sources":["../../../../../src/components/Atoms/Selectable/Selectable.tsx"],"sourcesContent":["import * as React from 'react'\nimport { StyleguideCheckmarkSquare } from '@excelwithbusiness/webmobile-svg-library'\nimport { Icon } from '../Icon'\nimport { CopyText } from '../Typography'\nimport { SelectableProps } from './Selectable.interface'\nimport {\n  StyledButtonLabel,\n  StyledButtonText,\n  StyledCopyText,\n  StyledFocusedIndicator,\n  StyledIcon,\n  StyledLabel,\n  StyledNativeSelectable,\n  StyledRadioMark,\n  StyledSelectableButton,\n  StyledSelectableButtonContentWrapper,\n  StyledSelectableContent,\n  StyledSelectableContentWrapper,\n} from './Selectable.styled'\n\nexport const Selectable: React.FC<SelectableProps> = ({\n  children,\n  displayType,\n  errorMessage,\n  icon,\n  isChecked,\n  label,\n  selectableId,\n  state = 'idle',\n  onChangeValue,\n  selectableSize = 'large',\n  type,\n  value = '',\n  name,\n  ...otherProps\n}) => {\n  const onInputChange = event => {\n    onChangeValue(event.target.checked, event.target.value)\n  }\n\n  const isCheckedValue = isChecked && { checked: isChecked }\n  const showError = state === 'error' && errorMessage\n\n  const SelectableRadio = (\n    <StyledLabel\n      key={selectableId + isChecked}\n      selectableSize={selectableSize}\n      state={state}\n      type={type}\n      htmlFor={selectableId}\n      {...otherProps}>\n      <StyledNativeSelectable\n        id={selectableId}\n        {...isCheckedValue}\n        type={type}\n        name={name}\n        value={value}\n        state={state}\n        selectableSize={selectableSize}\n        onChange={e => onInputChange(e)}\n      />\n      {type === 'checkbox' && (\n        <StyledIcon selectableSize={selectableSize} state={state}>\n          <StyleguideCheckmarkSquare fill={'primary'} />\n        </StyledIcon>\n      )}\n      {type === 'radio' && <StyledRadioMark selectableSize={selectableSize} state={state} />}\n      <StyledSelectableContentWrapper>\n        <StyledCopyText\n          padding=\"0 0 0 xs\"\n          fontSize={selectableSize === 'large' ? 'sm' : 'xs'}\n          lineHeight={selectableSize === 'large' ? 'sm' : 'xs'}>\n          {children || label}\n        </StyledCopyText>\n        {showError && (\n          <CopyText tag=\"div\" color=\"error\" fontSize=\"xxs\" margin=\"xs 0 0 0\" padding=\"0 0 0 xs\">\n            {errorMessage}\n          </CopyText>\n        )}\n      </StyledSelectableContentWrapper>\n      <StyledFocusedIndicator />\n    </StyledLabel>\n  )\n\n  const SelectableButton = (\n    <StyledButtonLabel key={selectableId + isChecked} htmlFor={selectableId}>\n      <StyledSelectableButton\n        id={selectableId}\n        {...isCheckedValue}\n        type={type}\n        name={name}\n        value={value}\n        onChange={e => onInputChange(e)}\n      />\n      <StyledSelectableButtonContentWrapper\n        elevation={isChecked ? 1 : 0}\n        shape=\"rounded-small\"\n        surface={isChecked ? 'selected' : 'white'}\n        padding={{ top: 'xs', right: 'sm', bottom: 'xs', left: 'sm' }}>\n        <StyledSelectableContent>\n          <Icon\n            height={selectableSize === 'large' ? 14 : 12}\n            width={selectableSize === 'large' ? 14 : 12}>\n            {icon}\n          </Icon>\n          <StyledButtonText\n            bold={isChecked}\n            color={isChecked ? 'black' : 'grey4'}\n            fontSize={selectableSize === 'large' ? 'sm' : 'xs'}\n            lineHeight={selectableSize === 'large' ? 'sm' : 'xs'}>\n            {children || label}\n          </StyledButtonText>\n        </StyledSelectableContent>\n      </StyledSelectableButtonContentWrapper>\n      <StyledFocusedIndicator />\n    </StyledButtonLabel>\n  )\n\n  return displayType === 'button' ? SelectableButton : SelectableRadio\n}\n"],"names":["Selectable","children","displayType","errorMessage","icon","isChecked","label","selectableId","state","onChangeValue","selectableSize","type","value","name","otherProps","onInputChange","event","target","checked","isCheckedValue","showError","SelectableRadio","React","StyledLabel","key","htmlFor","StyledNativeSelectable","id","onChange","e","StyledIcon","StyleguideCheckmarkSquare","fill","StyledRadioMark","StyledSelectableContentWrapper","StyledCopyText","padding","fontSize","lineHeight","CopyText","tag","color","margin","StyledFocusedIndicator","SelectableButton","StyledButtonLabel","StyledSelectableButton","StyledSelectableButtonContentWrapper","elevation","shape","surface","top","right","bottom","left","StyledSelectableContent","Icon","height","width","StyledButtonText","bold"],"mappings":"6sBAoBaA,EAAwC,gBACnDC,IAAAA,SACAC,IAAAA,YACAC,IAAAA,aACAC,IAAAA,KACAC,IAAAA,UACAC,IAAAA,MACAC,IAAAA,iBACAC,MAAAA,aAAQ,SACRC,IAAAA,kBACAC,eAAAA,aAAiB,UACjBC,IAAAA,SACAC,MAAAA,aAAQ,KACRC,IAAAA,KACGC,0JAEGC,EAAgB,SAAAC,GACpBP,EAAcO,EAAMC,OAAOC,QAASF,EAAMC,OAAOL,QAG7CO,EAAiBd,GAAa,CAAEa,QAASb,GACzCe,EAAsB,UAAVZ,GAAqBL,EAEjCkB,EACJC,gBAACC,KACCC,IAAKjB,EAAeF,EACpBK,eAAgBA,EAChBF,MAAOA,EACPG,KAAMA,EACNc,QAASlB,GACLO,GACJQ,gBAACI,KACCC,GAAIpB,GACAY,GACJR,KAAMA,EACNE,KAAMA,EACND,MAAOA,EACPJ,MAAOA,EACPE,eAAgBA,EAChBkB,SAAU,SAAAC,UAAKd,EAAcc,OAErB,aAATlB,GACCW,gBAACQ,GAAWpB,eAAgBA,EAAgBF,MAAOA,GACjDc,gBAACS,GAA0BC,KAAM,aAG3B,UAATrB,GAAoBW,gBAACW,GAAgBvB,eAAgBA,EAAgBF,MAAOA,IAC7Ec,gBAACY,OACCZ,gBAACa,GACCC,QAAQ,WACRC,SAA6B,UAAnB3B,EAA6B,KAAO,KAC9C4B,WAA+B,UAAnB5B,EAA6B,KAAO,MAC/CT,GAAYK,GAEdc,GACCE,gBAACiB,GAASC,IAAI,MAAMC,MAAM,QAAQJ,SAAS,MAAMK,OAAO,WAAWN,QAAQ,YACxEjC,IAIPmB,gBAACqB,SAICC,EACJtB,gBAACuB,GAAkBrB,IAAKjB,EAAeF,EAAWoB,QAASlB,GACzDe,gBAACwB,KACCnB,GAAIpB,GACAY,GACJR,KAAMA,EACNE,KAAMA,EACND,MAAOA,EACPgB,SAAU,SAAAC,UAAKd,EAAcc,OAE/BP,gBAACyB,GACCC,UAAW3C,EAAY,EAAI,EAC3B4C,MAAM,gBACNC,QAAS7C,EAAY,WAAa,QAClC+B,QAAS,CAAEe,IAAK,KAAMC,MAAO,KAAMC,OAAQ,KAAMC,KAAM,OACvDhC,gBAACiC,OACCjC,gBAACkC,GACCC,OAA2B,UAAnB/C,EAA6B,GAAK,GAC1CgD,MAA0B,UAAnBhD,EAA6B,GAAK,IACxCN,GAEHkB,gBAACqC,GACCC,KAAMvD,EACNoC,MAAOpC,EAAY,QAAU,QAC7BgC,SAA6B,UAAnB3B,EAA6B,KAAO,KAC9C4B,WAA+B,UAAnB5B,EAA6B,KAAO,MAC/CT,GAAYK,KAInBgB,gBAACqB,eAIkB,WAAhBzC,EAA2B0C,EAAmBvB"}